(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[477],{796:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>c});var a=t(7876),r=t(3923),s=t(8144),o=t(6004),l=t(1621);let i=function(e){let{children:n}=e;return(0,a.jsx)(s.S,{children:n})};function f(e){let n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(o.A,{children:[(0,a.jsx)(n.h2,{children:"Table of Contents"}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.strong,{children:"This article has a lot of content ahead. Below is a table of contents for your convenience:"})}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#intro",children:"Introduction to Tkinter"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#basic-gui-app",children:"Basic GUI App"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#tkinter-and-opencv",children:"Combining Tkinter with OpenCV"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#tkinter-and-matplotlib",children:"Combining Tkinter with MatPlotLib"})}),"\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"#tkinter-with-drones",children:"Using Tkinter with the Drones"})}),"\n"]}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsxs)(n.h1,{children:["Introduction to Tkinter ",(0,a.jsx)("a",{id:"intro"})]}),(0,a.jsx)(n.p,{children:'Tkinter (pronounced "T-K-inter") is Python\'s built-in library for creating graphical user interfaces (GUIs). Unlike command-line programs that\nonly show text, Tkinter lets you create windows with buttons, text boxes, images, and other visual elements that users can click and interact\nwith. Think of it as the tool that helps you build desktop applications that look and feel like the programs you use every day.'}),(0,a.jsx)(n.p,{children:'Tkinter comes pre-installed with Python, so you don\'t need to download anything extra. It\'s perfect for creating simple desktop applications,\ndata visualization tools, or even control panels for hardware projects like drones. The name "Tkinter" stands for "Tk interface" - Tk is the\nunderlying graphics toolkit that Tkinter uses to create windows and widgets.'}),(0,a.jsx)(n.p,{children:"In this tutorial, we'll start with simple GUI applications and gradually work up to more complex projects that combine Tkinter with computer\nvision and drone control. By the end, you'll be able to create professional-looking desktop applications with real functionality."}),(0,a.jsx)(n.h2,{children:"Why Use Tkinter?"}),(0,a.jsx)(n.p,{children:"Tkinter offers several advantages for beginners:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Built-in"}),": No additional installations required"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Cross-platform"}),": Works on Windows, Mac, and Linux"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Simple syntax"}),": Easy to learn and understand"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Flexible"}),": Can create everything from simple forms to complex applications"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Great for prototyping"}),": Quick to test ideas and build working demos"]}),"\n"]}),(0,a.jsx)("br",{}),(0,a.jsxs)(n.h1,{children:["Basic GUI App ",(0,a.jsx)("a",{id:"basic-gui-app"})]}),(0,a.jsx)(n.p,{children:"Let's start with the simplest possible Tkinter application - a window with a couple of buttons that actually do something when clicked."}),(0,a.jsx)(n.h2,{children:"Your First Window"}),(0,a.jsx)(l.zI,{code:'import tkinter as tk\n\n# Create the main window\nroot = tk.Tk()\nroot.title("My First GUI App")\nroot.geometry("300x200")  # Width x Height in pixels\n\n# Start the GUI event loop\nroot.mainloop()',tooltips:l.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:(0,a.jsx)(n.img,{src:"/images/gui_app.png",alt:"image",title:"Empty GUI window, sized 300x200"})}),(0,a.jsxs)(n.p,{children:["This creates an empty window. The ",(0,a.jsx)(n.code,{children:"mainloop()"})," function keeps the window open and responsive to user interactions. Without it, the window\nwould appear and immediately close."]}),(0,a.jsx)(n.h2,{children:"Adding Interactive Buttons"}),(0,a.jsx)(n.p,{children:"Now let's add some buttons that respond when clicked:"}),(0,a.jsx)(l.zI,{code:'import tkinter as tk\nfrom tkinter import messagebox\n\ndef button_click():\n  """Function called when the button is clicked"""\n  messagebox.showinfo("Button Clicked", "Hello! You clicked the button!")\n\ndef close_app():\n  """Function to close the application"""\n  root.quit()\n\n# Create the main window\nroot = tk.Tk()\nroot.title("Button Example")\nroot.geometry("300x200")\n\n# Create buttons\nhello_button = tk.Button(root, text="Click Me!", command=button_click)\nhello_button.pack(pady=20)  # pady adds vertical padding\n\nclose_button = tk.Button(root, text="Close App", command=close_app, bg="red", fg="white")\nclose_button.pack(pady=10)\n\n# Start the GUI\nroot.mainloop()',tooltips:l.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.img,{src:"/images/gui_button_example.png",alt:"image",title:"GUI window that has interactive buttons"}),(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.img,{src:"/images/gui_button_clicked.png",alt:"image",title:'A separate GUI window that opens when the "Click me!" button is clicked'}),(0,a.jsx)("br",{})]}),(0,a.jsx)(n.p,{children:"The key concepts here are:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Functions"}),": We define what happens when buttons are clicked"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Commands"}),": The ",(0,a.jsx)(n.code,{children:"command"})," parameter connects buttons to functions"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Pack"}),": This arranges widgets in the window"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Styling"}),": We can change colors with ",(0,a.jsx)(n.code,{children:"bg"})," (background) and ",(0,a.jsx)(n.code,{children:"fg"})," (foreground/text)"]}),"\n"]}),(0,a.jsx)(n.h2,{children:"Adding Text Input"}),(0,a.jsx)(n.p,{children:"Most applications need to get input from users. Let's create an app that takes text input and displays it:"}),(0,a.jsx)(l.zI,{code:'import tkinter as tk\nfrom tkinter import messagebox\n\ndef process_text():\n  """Get text from the input field and display it"""\n  user_text = text_entry.get()  # Get text from the entry widget\n  \n  if user_text.strip():  # Check if text isn\'t empty\n      messagebox.showinfo("Your Input", f"You entered: {user_text}")\n      text_entry.delete(0, tk.END)  # Clear the input field\n  else:\n      messagebox.showwarning("Empty Input", "Please enter some text!")\n\ndef clear_text():\n  """Clear the input field"""\n  text_entry.delete(0, tk.END)\n\n# Create main window\nroot = tk.Tk()\nroot.title("Text Input Example")\nroot.geometry("400x250")\n\n# Create and pack widgets\ntk.Label(root, text="Enter your text below:", font=("Arial", 12)).pack(pady=10)\n\ntext_entry = tk.Entry(root, width=30, font=("Arial", 11))\ntext_entry.pack(pady=10)\n\n# Frame to hold buttons side by side\nbutton_frame = tk.Frame(root)\nbutton_frame.pack(pady=20)\n\nprocess_button = tk.Button(button_frame, text="Process Text", command=process_text, bg="green", fg="white")\nprocess_button.pack(side=tk.LEFT, padx=10)\n\nclear_button = tk.Button(button_frame, text="Clear", command=clear_text, bg="orange", fg="white")\nclear_button.pack(side=tk.LEFT, padx=10)\n\n# Focus on the text entry when the app starts\ntext_entry.focus()\n\nroot.mainloop()',tooltips:l.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.img,{src:"/images/gui_input_example.png",alt:"image",title:"GUI window with interactive buttons and a text input"}),(0,a.jsx)("br",{}),"\n",(0,a.jsx)(n.img,{src:"/images/gui_input_display.png",alt:"image",title:"GUI window that displays the text the user inputs"}),(0,a.jsx)("br",{})]}),(0,a.jsx)(n.p,{children:"New concepts introduced:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Entry widget"}),": For single-line text input"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Label widget"}),": For displaying text"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Frames"}),": Containers to group and organize widgets"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Font styling"}),": Making text larger and changing fonts"]}),"\n",(0,a.jsxs)(n.li,{children:[(0,a.jsx)(n.strong,{children:"Focus"}),": Making a widget active when the app starts"]}),"\n"]}),(0,a.jsx)("br",{}),(0,a.jsxs)(n.h1,{children:["Combining Tkinter with OpenCV ",(0,a.jsx)("a",{id:"tkinter-and-opencv"})]}),(0,a.jsx)(n.p,{children:"OpenCV is a powerful computer vision library, and combining it with Tkinter creates applications that can process and display images with a\nuser-friendly interface. This is perfect for image analysis projects or computer vision demonstrations."}),(0,a.jsx)(n.h2,{children:"File Selection and Image Display"}),(0,a.jsx)(n.p,{children:"Let's create an application that lets users select an image file and displays it in the GUI. There is also an option to add a grayscale filter\nto the image:"}),(0,a.jsx)(l.zI,{code:'import tkinter as tk\nfrom tkinter import filedialog, messagebox\nimport cv2\nfrom PIL import Image, ImageTk\nimport numpy as np\n\nclass ImageViewer:\n  def __init__(self, root):\n      self.root = root\n      self.root.title("Image Viewer with OpenCV")\n      self.root.geometry("800x600")\n      \n      self.current_image = None\n      self.original_image = None\n      \n      self.setup_gui()\n  \n  def setup_gui(self):\n      """Create the GUI elements"""\n      # Control frame for buttons\n      control_frame = tk.Frame(self.root)\n      control_frame.pack(pady=10)\n      \n      tk.Button(control_frame, text="Select Image", command=self.select_image, \n               bg="blue", fg="white", font=("Arial", 12)).pack(side=tk.LEFT, padx=5)\n      \n      tk.Button(control_frame, text="Convert to Grayscale", command=self.convert_grayscale,\n               bg="gray", fg="white", font=("Arial", 12)).pack(side=tk.LEFT, padx=5)\n      \n      tk.Button(control_frame, text="Reset to Original", command=self.reset_image,\n               bg="green", fg="white", font=("Arial", 12)).pack(side=tk.LEFT, padx=5)\n      \n      # Image display area\n      self.image_label = tk.Label(self.root, text="No image selected", \n                                 bg="lightgray", width=60, height=20)\n      self.image_label.pack(pady=20, expand=True, fill=tk.BOTH)\n  \n  def select_image(self):\n      """Open file dialog to select an image"""\n      file_path = filedialog.askopenfilename(\n          title="Select an Image",\n          filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp *.tiff"), ("All files", "*.*")]\n      )\n      \n      if file_path:\n          try:\n              # Load image with OpenCV\n              self.original_image = cv2.imread(file_path)\n              self.current_image = self.original_image.copy()\n              \n              if self.original_image is not None:\n                  self.display_image()\n              else:\n                  messagebox.showerror("Error", "Could not load the selected image!")\n                  \n          except Exception as e:\n              messagebox.showerror("Error", f"Failed to load image: {str(e)}")\n  \n  def display_image(self):\n      """Display the current image in the GUI"""\n      if self.current_image is not None:\n          # Resize image to fit in the display area\n          display_image = self.resize_for_display(self.current_image)\n          \n          # Convert from BGR (OpenCV) to RGB (PIL/Tkinter)\n          rgb_image = cv2.cvtColor(display_image, cv2.COLOR_BGR2RGB)\n          \n          # Convert to PIL Image and then to PhotoImage for Tkinter\n          pil_image = Image.fromarray(rgb_image)\n          photo = ImageTk.PhotoImage(pil_image)\n          \n          # Update the label\n          self.image_label.configure(image=photo, text="")\n          self.image_label.image = photo  # Keep a reference to prevent garbage collection\n  \n  def resize_for_display(self, image, max_width=600, max_height=400):\n      """Resize image to fit in the display area while maintaining aspect ratio"""\n      height, width = image.shape[:2]\n      \n      # Calculate scaling factor\n      scale = min(max_width/width, max_height/height)\n      \n      if scale < 1:\n          new_width = int(width * scale)\n          new_height = int(height * scale)\n          return cv2.resize(image, (new_width, new_height))\n      \n      return image\n  \n  def convert_grayscale(self):\n      """Convert current image to grayscale"""\n      if self.current_image is not None:\n          gray = cv2.cvtColor(self.current_image, cv2.COLOR_BGR2GRAY)\n          # Convert back to 3-channel for consistent display\n          self.current_image = cv2.cvtColor(gray, cv2.COLOR_GRAY2BGR)\n          self.display_image()\n      else:\n          messagebox.showwarning("No Image", "Please select an image first!")\n  \n  def reset_image(self):\n      """Reset to the original image"""\n      if self.original_image is not None:\n          self.current_image = self.original_image.copy()\n          self.display_image()\n      else:\n          messagebox.showwarning("No Image", "No original image to reset to!")\n\n# Create and run the application\nif __name__ == "__main__":\n  root = tk.Tk()\n  app = ImageViewer(root)\n  root.mainloop()',tooltips:l.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"This example demonstrates several important concepts:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Class-based GUI"}),": Using a class to organize our code makes it easier to manage state (like the current image) and creates reusable\ncomponents."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"File dialogs"}),": The ",(0,a.jsx)(n.code,{children:"filedialog.askopenfilename()"})," function creates a standard file selection window that users are familiar with."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Image format conversion"}),": OpenCV uses BGR color format, but Tkinter expects RGB, so we need to convert between them."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Dynamic resizing"}),": Images are automatically resized to fit in the display area while maintaining their aspect ratio."]}),"\n"]}),"\n"]}),(0,a.jsx)(n.h2,{children:"Advanced Image Processing Example"}),(0,a.jsx)(n.p,{children:"Let's extend our image viewer with more OpenCV features:"}),(0,a.jsx)(l.zI,{code:'import tkinter as tk\nfrom tkinter import filedialog, messagebox, ttk\nimport cv2\nfrom PIL import Image, ImageTk\nimport numpy as np\n\nclass AdvancedImageProcessor:\n  def __init__(self, root):\n      self.root = root\n      self.root.title("Advanced Image Processor")\n      self.root.geometry("900x700")\n      \n      self.current_image = None\n      self.original_image = None\n      \n      self.setup_gui()\n  \n  def setup_gui(self):\n      """Create the GUI with multiple processing options"""\n      # Main control frame\n      control_frame = tk.Frame(self.root)\n      control_frame.pack(pady=10)\n      \n      # File operations\n      file_frame = tk.Frame(control_frame)\n      file_frame.pack(pady=5)\n      \n      tk.Button(file_frame, text="Select Image", command=self.select_image,\n               bg="blue", fg="white").pack(side=tk.LEFT, padx=5)\n      tk.Button(file_frame, text="Save Image", command=self.save_image,\n               bg="purple", fg="white").pack(side=tk.LEFT, padx=5)\n      tk.Button(file_frame, text="Reset", command=self.reset_image,\n               bg="red", fg="white").pack(side=tk.LEFT, padx=5)\n      \n      # Processing options\n      process_frame = tk.Frame(control_frame)\n      process_frame.pack(pady=5)\n      \n      tk.Button(process_frame, text="Blur", command=self.apply_blur,\n               bg="orange").pack(side=tk.LEFT, padx=3)\n      tk.Button(process_frame, text="Edge Detection", command=self.detect_edges,\n               bg="green", fg="white").pack(side=tk.LEFT, padx=3)\n      tk.Button(process_frame, text="Brighten", command=self.brighten_image,\n               bg="yellow").pack(side=tk.LEFT, padx=3)\n      tk.Button(process_frame, text="Find Contours", command=self.find_contours,\n               bg="cyan").pack(side=tk.LEFT, padx=3)\n      \n      # Image display\n      self.image_label = tk.Label(self.root, text="Select an image to begin",\n                                 bg="lightgray", width=80, height=25)\n      self.image_label.pack(pady=20, expand=True, fill=tk.BOTH)\n      \n      # Status bar\n      self.status_var = tk.StringVar()\n      self.status_var.set("Ready")\n      status_bar = tk.Label(self.root, textvariable=self.status_var, \n                          relief=tk.SUNKEN, anchor=tk.W)\n      status_bar.pack(side=tk.BOTTOM, fill=tk.X)\n  \n  def select_image(self):\n      """Select and load an image file"""\n      file_path = filedialog.askopenfilename(\n          title="Select an Image",\n          filetypes=[("Image files", "*.jpg *.jpeg *.png *.bmp"), ("All files", "*.*")]\n      )\n      \n      if file_path:\n          try:\n              self.original_image = cv2.imread(file_path)\n              if self.original_image is not None:\n                  self.current_image = self.original_image.copy()\n                  self.display_image()\n                  self.status_var.set(f"Loaded: {file_path.split(\'/\')[-1]}")\n              else:\n                  messagebox.showerror("Error", "Could not load image!")\n          except Exception as e:\n              messagebox.showerror("Error", f"Failed to load image: {str(e)}")\n  \n  def save_image(self):\n      """Save the current processed image"""\n      if self.current_image is not None:\n          file_path = filedialog.asksaveasfilename(\n              title="Save Image",\n              defaultextension=".png",\n              filetypes=[("PNG files", "*.png"), ("JPEG files", "*.jpg"), ("All files", "*.*")]\n          )\n          \n          if file_path:\n              cv2.imwrite(file_path, self.current_image)\n              self.status_var.set(f"Saved: {file_path.split(\'/\')[-1]}")\n      else:\n          messagebox.showwarning("No Image", "No image to save!")\n  \n  def display_image(self):\n      """Display the current image"""\n      if self.current_image is not None:\n          # Resize for display\n          display_img = self.resize_for_display(self.current_image)\n          \n          # Handle both color and grayscale images\n          if len(display_img.shape) == 3:\n              rgb_image = cv2.cvtColor(display_img, cv2.COLOR_BGR2RGB)\n          else:\n              rgb_image = cv2.cvtColor(display_img, cv2.COLOR_GRAY2RGB)\n          \n          pil_image = Image.fromarray(rgb_image)\n          photo = ImageTk.PhotoImage(pil_image)\n          \n          self.image_label.configure(image=photo, text="")\n          self.image_label.image = photo\n  \n  def resize_for_display(self, image, max_width=700, max_height=500):\n      """Resize image while maintaining aspect ratio"""\n      if len(image.shape) == 3:\n          height, width = image.shape[:2]\n      else:\n          height, width = image.shape\n      \n      scale = min(max_width/width, max_height/height)\n      \n      if scale < 1:\n          new_width = int(width * scale)\n          new_height = int(height * scale)\n          return cv2.resize(image, (new_width, new_height))\n      \n      return image\n  \n  def apply_blur(self):\n      """Apply Gaussian blur to the image"""\n      if self.current_image is not None:\n          self.current_image = cv2.GaussianBlur(self.current_image, (15, 15), 0)\n          self.display_image()\n          self.status_var.set("Applied blur effect")\n      else:\n          messagebox.showwarning("No Image", "Please select an image first!")\n  \n  def detect_edges(self):\n      """Apply edge detection using Canny algorithm"""\n      if self.current_image is not None:\n          gray = cv2.cvtColor(self.current_image, cv2.COLOR_BGR2GRAY)\n          edges = cv2.Canny(gray, 100, 200)\n          self.current_image = edges  # Store as grayscale\n          self.display_image()\n          self.status_var.set("Applied edge detection")\n      else:\n          messagebox.showwarning("No Image", "Please select an image first!")\n  \n  def brighten_image(self):\n      """Increase image brightness"""\n      if self.current_image is not None:\n          # Add 30 to all pixel values, but cap at 255\n          self.current_image = cv2.add(self.current_image, np.ones(self.current_image.shape, dtype=np.uint8) * 30)\n          self.display_image()\n          self.status_var.set("Brightened image")\n      else:\n          messagebox.showwarning("No Image", "Please select an image first!")\n  \n  def find_contours(self):\n      """Find and draw contours on the image"""\n      if self.current_image is not None:\n          # Convert to grayscale for contour detection\n          gray = cv2.cvtColor(self.current_image, cv2.COLOR_BGR2GRAY)\n          \n          # Apply threshold to get binary image\n          _, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)\n          \n          # Find contours\n          contours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n          \n          # Draw contours on a copy of the original\n          contour_image = self.current_image.copy()\n          cv2.drawContours(contour_image, contours, -1, (0, 255, 0), 2)\n          \n          self.current_image = contour_image\n          self.display_image()\n          self.status_var.set(f"Found {len(contours)} contours")\n      else:\n          messagebox.showwarning("No Image", "Please select an image first!")\n  \n  def reset_image(self):\n      """Reset to original image"""\n      if self.original_image is not None:\n          self.current_image = self.original_image.copy()\n          self.display_image()\n          self.status_var.set("Reset to original image")\n      else:\n          messagebox.showwarning("No Image", "No original image to reset to!")\n\n# Run the application\nif __name__ == "__main__":\n  root = tk.Tk()\n  app = AdvancedImageProcessor(root)\n  root.mainloop()',tooltips:l.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"This advanced example introduces:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Multiple image processing techniques"}),": Blur, edge detection, brightness adjustment, and contour finding"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Save functionality"}),": Users can save their processed images"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status bar"}),": Provides feedback about current operations"]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Better error handling"}),": More robust handling of different image types and edge cases"]}),"\n"]}),"\n"]}),(0,a.jsx)("br",{}),(0,a.jsxs)(n.h1,{children:["Combining Tkinter with MatPlotLib ",(0,a.jsx)("a",{id:"tkinter-and-matplotlib"})]}),(0,a.jsx)(n.p,{children:"Matplotlib is Python's main plotting library, and embedding plots in Tkinter applications creates powerful data visualization tools. Instead of showing plots in separate windows, we can integrate them directly into our GUI."}),(0,a.jsx)(n.h2,{children:"Basic Chart Integration"}),(0,a.jsx)(n.p,{children:"Let's start with a simple example that creates different types of charts:"}),(0,a.jsx)(l.zI,{code:"import tkinter as tk\nfrom tkinter import ttk, filedialog, messagebox\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport numpy as np\nimport csv\n\nclass DataVisualizer:\n  def __init__(self, root):\n      self.root = root\n      self.root.title(\"Data Visualization Tool\")\n      self.root.geometry(\"1000x700\")\n      \n      self.data = None\n      self.figure = None\n      self.canvas = None\n      \n      self.setup_gui()\n      self.create_sample_data()\n  \n  def setup_gui(self):\n      \"\"\"Create the main GUI layout\"\"\"\n      # Control panel on the left\n      control_frame = tk.Frame(self.root, width=200, bg=\"lightgray\")\n      control_frame.pack(side=tk.LEFT, fill=tk.Y, padx=10, pady=10)\n      control_frame.pack_propagate(False)\n      \n      tk.Label(control_frame, text=\"Data Visualization\", font=(\"Arial\", 14, \"bold\"), \n              bg=\"lightgray\").pack(pady=10)\n      \n      # Data source buttons\n      tk.Button(control_frame, text=\"Load CSV File\", command=self.load_csv_file,\n               bg=\"blue\", fg=\"white\", width=18).pack(pady=5)\n      tk.Button(control_frame, text=\"Use Sample Data\", command=self.create_sample_data,\n               bg=\"green\", fg=\"white\", width=18).pack(pady=5)\n      \n      tk.Label(control_frame, text=\"Chart Types:\", font=(\"Arial\", 12, \"bold\"),\n              bg=\"lightgray\").pack(pady=(20, 5))\n      \n      # Chart type buttons\n      tk.Button(control_frame, text=\"Bar Chart\", command=self.create_bar_chart,\n               width=18).pack(pady=2)\n      tk.Button(control_frame, text=\"Line Chart\", command=self.create_line_chart,\n               width=18).pack(pady=2)\n      tk.Button(control_frame, text=\"Pie Chart\", command=self.create_pie_chart,\n               width=18).pack(pady=2)\n      tk.Button(control_frame, text=\"Scatter Plot\", command=self.create_scatter_plot,\n               width=18).pack(pady=2)\n      tk.Button(control_frame, text=\"Histogram\", command=self.create_histogram,\n               width=18).pack(pady=2)\n      \n      # Chart area on the right\n      self.chart_frame = tk.Frame(self.root)\n      self.chart_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=10, pady=10)\n      \n      # Initialize with empty chart area\n      self.init_chart_area()\n  \n  def init_chart_area(self):\n      \"\"\"Initialize the matplotlib figure and canvas\"\"\"\n      self.figure, self.ax = plt.subplots(figsize=(8, 6))\n      self.canvas = FigureCanvasTkAgg(self.figure, self.chart_frame)\n      self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)\n      \n      # Initial empty plot\n      self.ax.text(0.5, 0.5, 'Select a chart type to begin', \n                  horizontalalignment='center', verticalalignment='center',\n                  transform=self.ax.transAxes, fontsize=16)\n      self.ax.set_xticks([])\n      self.ax.set_yticks([])\n      self.canvas.draw()\n  \n  def create_sample_data(self):\n      \"\"\"Create sample data for demonstration\"\"\"\n      self.data = {\n          'categories': ['Category A', 'Category B', 'Category C', 'Category D', 'Category E'],\n          'values': [23, 45, 56, 78, 32],\n          'x_data': np.linspace(0, 10, 50),\n          'y_data': np.sin(np.linspace(0, 10, 50)) * 50 + np.random.normal(0, 5, 50),\n          'random_data': np.random.normal(100, 15, 1000)\n      }\n      messagebox.showinfo(\"Data Loaded\", \"Sample data has been created successfully!\")\n  \n  def load_csv_file(self):\n      \"\"\"Load data from a CSV file\"\"\"\n      file_path = filedialog.askopenfilename(\n          title=\"Select CSV File\",\n          filetypes=[(\"CSV files\", \"*.csv\"), (\"All files\", \"*.*\")]\n      )\n      \n      if file_path:\n          try:\n              with open(file_path, 'r') as file:\n                  csv_reader = csv.reader(file)\n                  rows = list(csv_reader)\n                  \n                  if len(rows) < 2:\n                      messagebox.showerror(\"Error\", \"CSV file must have at least 2 rows (header + data)\")\n                      return\n                  \n                  headers = rows[0]\n                  data_rows = rows[1:]\n                  \n                  # Try to convert numeric columns\n                  self.data = {}\n                  for i, header in enumerate(headers):\n                      column_data = [row[i] for row in data_rows if i < len(row)]\n                      \n                      # Try to convert to numbers\n                      try:\n                          numeric_data = [float(val) for val in column_data if val.strip()]\n                          self.data[header] = numeric_data\n                      except ValueError:\n                          # Keep as text if conversion fails\n                          self.data[header] = column_data\n                  \n                  messagebox.showinfo(\"Success\", f\"Loaded data from {file_path.split('/')[-1]}\")\n                  \n          except Exception as e:\n              messagebox.showerror(\"Error\", f\"Failed to load CSV: {str(e)}\")\n  \n  def clear_plot(self):\n      \"\"\"Clear the current plot\"\"\"\n      self.ax.clear()\n  \n  def create_bar_chart(self):\n      \"\"\"Create a bar chart from the data\"\"\"\n      if not self.data:\n          messagebox.showwarning(\"No Data\", \"Please load data first!\")\n          return\n      \n      self.clear_plot()\n      \n      if 'categories' in self.data and 'values' in self.data:\n          bars = self.ax.bar(self.data['categories'], self.data['values'], \n                            color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7'])\n          self.ax.set_title('Bar Chart', fontsize=16, fontweight='bold')\n          self.ax.set_ylabel('Values')\n          \n          # Add value labels on bars\n          for bar in bars:\n              height = bar.get_height()\n              self.ax.text(bar.get_x() + bar.get_width()/2., height,\n                         f'{height}', ha='center', va='bottom')\n      else:\n          # Use first two numeric columns found\n          numeric_cols = [(k, v) for k, v in self.data.items() if isinstance(v[0], (int, float))]\n          if len(numeric_cols) >= 1:\n              values = numeric_cols[0][1][:10]  # Limit to 10 items\n              labels = [f'Item {i+1}' for i in range(len(values))]\n              self.ax.bar(labels, values, color='skyblue')\n              self.ax.set_title(f'Bar Chart - {numeric_cols[0][0]}', fontsize=16, fontweight='bold')\n          else:\n              self.ax.text(0.5, 0.5, 'No suitable data for bar chart', \n                         ha='center', va='center', transform=self.ax.transAxes)\n      \n      plt.setp(self.ax.get_xticklabels(), rotation=45, ha='right')\n      self.figure.tight_layout()\n      self.canvas.draw()\n  \n  def create_line_chart(self):\n      \"\"\"Create a line chart\"\"\"\n      if not self.data:\n          messagebox.showwarning(\"No Data\", \"Please load data first!\")\n          return\n      \n      self.clear_plot()\n      \n      if 'x_data' in self.data and 'y_data' in self.data:\n          self.ax.plot(self.data['x_data'], self.data['y_data'], \n                      marker='o', linestyle='-', color='#FF6B6B', linewidth=2, markersize=4)\n          self.ax.set_title('Line Chart - Sample Data', fontsize=16, fontweight='bold')\n          self.ax.set_xlabel('X Values')\n          self.ax.set_ylabel('Y Values')\n          self.ax.grid(True, alpha=0.3)\n      else:\n          # Use first numeric column\n          numeric_cols = [(k, v) for k, v in self.data.items() if isinstance(v[0], (int, float))]\n          if numeric_cols:\n              values = numeric_cols[0][1][:50]  # Limit to 50 points\n              x_vals = list(range(len(values)))\n              self.ax.plot(x_vals, values, marker='o', linestyle='-', linewidth=2)\n              self.ax.set_title(f'Line Chart - {numeric_cols[0][0]}', fontsize=16, fontweight='bold')\n              self.ax.grid(True, alpha=0.3)\n      \n      self.figure.tight_layout()\n      self.canvas.draw()\n  \n  def create_pie_chart(self):\n      \"\"\"Create a pie chart\"\"\"\n      if not self.data:\n          messagebox.showwarning(\"No Data\", \"Please load data first!\")\n          return\n      \n      self.clear_plot()\n      \n      if 'categories' in self.data and 'values' in self.data:\n          colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FFEAA7']\n          wedges, texts, autotexts = self.ax.pie(self.data['values'], labels=self.data['categories'], \n                                                autopct='%1.1f%%', colors=colors, startangle=90)\n          self.ax.set_title('Pie Chart', fontsize=16, fontweight='bold')\n      else:\n          # Use first numeric column\n          numeric_cols = [(k, v) for k, v in self.data.items() if isinstance(v[0], (int, float))]\n          if numeric_cols:\n              values = numeric_cols[0][1][:8]  # Limit to 8 slices\n              labels = [f'Item {i+1}' for i in range(len(values))]\n              self.ax.pie(values, labels=labels, autopct='%1.1f%%', startangle=90)\n              self.ax.set_title(f'Pie Chart - {numeric_cols[0][0]}', fontsize=16, fontweight='bold')\n      \n      self.figure.tight_layout()\n      self.canvas.draw()\n  \n  def create_scatter_plot(self):\n      \"\"\"Create a scatter plot\"\"\"\n      if not self.data:\n          messagebox.showwarning(\"No Data\", \"Please load data first!\")\n          return\n      \n      self.clear_plot()\n      \n      if 'x_data' in self.data and 'y_data' in self.data:\n          self.ax.scatter(self.data['x_data'], self.data['y_data'], \n                         c='#FF6B6B', alpha=0.6, s=50)\n          self.ax.set_title('Scatter Plot', fontsize=16, fontweight='bold')\n          self.ax.set_xlabel('X Values')\n          self.ax.set_ylabel('Y Values')\n          self.ax.grid(True, alpha=0.3)\n      else:\n          # Use first two numeric columns\n          numeric_cols = [(k, v) for k, v in self.data.items() if isinstance(v[0], (int, float))]\n          if len(numeric_cols) >= 2:\n              x_vals = numeric_cols[0][1][:100]\n              y_vals = numeric_cols[1][1][:100]\n              self.ax.scatter(x_vals, y_vals, alpha=0.6, s=50)\n              self.ax.set_title(f'Scatter: {numeric_cols[0][0]} vs {numeric_cols[1][0]}', \n                              fontsize=16, fontweight='bold')\n              self.ax.set_xlabel(numeric_cols[0][0])\n              self.ax.set_ylabel(numeric_cols[1][0])\n              self.ax.grid(True, alpha=0.3)\n          else:\n              self.ax.text(0.5, 0.5, 'Need at least 2 numeric columns', \n                         ha='center', va='center', transform=self.ax.transAxes)\n      \n      self.figure.tight_layout()\n      self.canvas.draw()\n  \n  def create_histogram(self):\n      \"\"\"Create a histogram\"\"\"\n      if not self.data:\n          messagebox.showwarning(\"No Data\", \"Please load data first!\")\n          return\n      \n      self.clear_plot()\n      \n      if 'random_data' in self.data:\n          self.ax.hist(self.data['random_data'], bins=30, color='#4ECDC4', alpha=0.7, edgecolor='black')\n          self.ax.set_title('Histogram - Random Data Distribution', fontsize=16, fontweight='bold')\n          self.ax.set_xlabel('Value')\n          self.ax.set_ylabel('Frequency')\n          self.ax.grid(True, alpha=0.3)\n      else:\n          # Use first numeric column\n          numeric_cols = [(k, v) for k, v in self.data.items() if isinstance(v[0], (int, float))]\n          if numeric_cols:\n              values = numeric_cols[0][1]\n              self.ax.hist(values, bins=min(20, len(values)//5), alpha=0.7, edgecolor='black')\n              self.ax.set_title(f'Histogram - {numeric_cols[0][0]}', fontsize=16, fontweight='bold')\n              self.ax.set_xlabel(numeric_cols[0][0])\n              self.ax.set_ylabel('Frequency')\n              self.ax.grid(True, alpha=0.3)\n      \n      self.figure.tight_layout()\n      self.canvas.draw()\n\n# Run the application\nif __name__ == \"__main__\":\n  root = tk.Tk()\n  app = DataVisualizer(root)\n  root.mainloop()",tooltips:l.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"This comprehensive data visualization tool demonstrates:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Canvas Integration"}),": The ",(0,a.jsx)(n.code,{children:"FigureCanvasTkAgg"})," class embeds MatPlotLib plots directly in Tkinter windows, creating seamless integration\nbetween data visualization and GUI controls."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Dynamic Chart Creation"}),": Users can switch between different chart types with the same data, showing how the same information can be\npresented in multiple ways."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"File I/O Integration"}),": The CSV loading functionality shows how to combine file dialogs with data processing, a common pattern in data\nanalysis applications."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Flexible Data Handling"}),": The application can work with both predefined sample data and user-loaded CSV files, automatically detecting\nnumeric columns and adapting chart creation accordingly."]}),"\n"]}),"\n"]}),(0,a.jsx)(n.h2,{children:"Interactive Data Analysis Tool"}),(0,a.jsx)(n.p,{children:"Let's create a more advanced example that allows real-time data manipulation:"}),(0,a.jsx)(l.zI,{code:'import tkinter as tk\nfrom tkinter import ttk, filedialog, messagebox\nimport matplotlib.pyplot as plt\nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg\nimport numpy as np\n\nclass InteractiveAnalyzer:\n  def __init__(self, root):\n      self.root = root\n      self.root.title("Interactive Data Analyzer")\n      self.root.geometry("1200x800")\n      \n      self.setup_gui()\n      self.generate_sample_data()\n  \n  def setup_gui(self):\n      """Create the interactive GUI"""\n      # Left panel for controls\n      left_panel = tk.Frame(self.root, width=300, bg="lightblue")\n      left_panel.pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=5)\n      left_panel.pack_propagate(False)\n      \n      tk.Label(left_panel, text="Interactive Data Analyzer", \n              font=("Arial", 14, "bold"), bg="lightblue").pack(pady=10)\n      \n      # Data generation controls\n      tk.Label(left_panel, text="Data Generation:", font=("Arial", 12, "bold"),\n              bg="lightblue").pack(pady=(10, 5))\n      \n      # Number of points slider\n      tk.Label(left_panel, text="Number of Points:", bg="lightblue").pack()\n      self.points_var = tk.IntVar(value=100)\n      self.points_scale = tk.Scale(left_panel, from_=50, to=500, orient=tk.HORIZONTAL,\n                                 variable=self.points_var, command=self.update_data)\n      self.points_scale.pack(pady=5)\n      \n      # Noise level slider\n      tk.Label(left_panel, text="Noise Level:", bg="lightblue").pack()\n      self.noise_var = tk.DoubleVar(value=0.5)\n      self.noise_scale = tk.Scale(left_panel, from_=0.1, to=2.0, resolution=0.1,\n                                orient=tk.HORIZONTAL, variable=self.noise_var,\n                                command=self.update_data)\n      self.noise_scale.pack(pady=5)\n      \n      # Function type selection\n      tk.Label(left_panel, text="Function Type:", bg="lightblue").pack(pady=(10, 5))\n      self.function_var = tk.StringVar(value="sine")\n      functions = [("Sine Wave", "sine"), ("Cosine Wave", "cosine"), \n                  ("Linear", "linear"), ("Quadratic", "quadratic")]\n      \n      for text, value in functions:\n          tk.Radiobutton(left_panel, text=text, variable=self.function_var,\n                        value=value, bg="lightblue", command=self.update_data).pack(anchor=tk.W)\n      \n      # Analysis controls\n      tk.Label(left_panel, text="Analysis Tools:", font=("Arial", 12, "bold"),\n              bg="lightblue").pack(pady=(20, 5))\n      \n      tk.Button(left_panel, text="Show Statistics", command=self.show_statistics,\n               bg="green", fg="white", width=20).pack(pady=3)\n      tk.Button(left_panel, text="Fit Trend Line", command=self.fit_trend_line,\n               bg="orange", fg="white", width=20).pack(pady=3)\n      tk.Button(left_panel, text="Show Moving Average", command=self.show_moving_average,\n               bg="purple", fg="white", width=20).pack(pady=3)\n      tk.Button(left_panel, text="Reset View", command=self.reset_view,\n               bg="red", fg="white", width=20).pack(pady=3)\n      \n      # Statistics display\n      self.stats_frame = tk.Frame(left_panel, bg="white", relief=tk.SUNKEN, bd=1)\n      self.stats_frame.pack(fill=tk.X, padx=5, pady=10)\n      \n      self.stats_text = tk.Text(self.stats_frame, height=8, width=30, font=("Courier", 9))\n      self.stats_text.pack(padx=5, pady=5)\n      \n      # Right panel for plot\n      self.plot_frame = tk.Frame(self.root)\n      self.plot_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)\n      \n      # Create matplotlib figure\n      self.figure, self.ax = plt.subplots(figsize=(10, 8))\n      self.canvas = FigureCanvasTkAgg(self.figure, self.plot_frame)\n      self.canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)\n      \n      # Add toolbar for zoom/pan\n      from matplotlib.backends.backend_tkagg import NavigationToolbar2Tk\n      self.toolbar = NavigationToolbar2Tk(self.canvas, self.plot_frame)\n      self.toolbar.update()\n  \n  def generate_sample_data(self):\n      """Generate sample data based on current settings"""\n      n_points = self.points_var.get()\n      noise_level = self.noise_var.get()\n      func_type = self.function_var.get()\n      \n      self.x_data = np.linspace(0, 4*np.pi, n_points)\n      \n      if func_type == "sine":\n          self.y_data = np.sin(self.x_data) + np.random.normal(0, noise_level, n_points)\n      elif func_type == "cosine":\n          self.y_data = np.cos(self.x_data) + np.random.normal(0, noise_level, n_points)\n      elif func_type == "linear":\n          self.y_data = 0.5 * self.x_data + np.random.normal(0, noise_level, n_points)\n      elif func_type == "quadratic":\n          self.y_data = 0.1 * self.x_data**2 + np.random.normal(0, noise_level, n_points)\n      \n      self.plot_basic_data()\n  \n  def update_data(self, event=None):\n      """Update data when sliders change"""\n      self.generate_sample_data()\n  \n  def plot_basic_data(self):\n      """Plot the basic data points"""\n      self.ax.clear()\n      self.ax.scatter(self.x_data, self.y_data, alpha=0.6, c=\'blue\', s=20)\n      self.ax.set_title(f\'{self.function_var.get().title()} Function with Noise\', \n                       fontsize=14, fontweight=\'bold\')\n      self.ax.set_xlabel(\'X Values\')\n      self.ax.set_ylabel(\'Y Values\')\n      self.ax.grid(True, alpha=0.3)\n      self.canvas.draw()\n  \n  def show_statistics(self):\n      """Calculate and display statistics"""\n      mean_x = np.mean(self.x_data)\n      mean_y = np.mean(self.y_data)\n      std_x = np.std(self.x_data)\n      std_y = np.std(self.y_data)\n      correlation = np.corrcoef(self.x_data, self.y_data)[0, 1]\n      \n      stats_text = f"""Data Statistics:\n      \nPoints: {len(self.x_data)}\n      \nX Statistics:\nMean: {mean_x:.3f}\nStd Dev: {std_x:.3f}\nMin: {np.min(self.x_data):.3f}\nMax: {np.max(self.x_data):.3f}\n\nY Statistics:\nMean: {mean_y:.3f}\nStd Dev: {std_y:.3f}\nMin: {np.min(self.y_data):.3f}\nMax: {np.max(self.y_data):.3f}\n\nCorrelation: {correlation:.3f}\n"""\n      \n      self.stats_text.delete(1.0, tk.END)\n      self.stats_text.insert(1.0, stats_text)\n  \n  def fit_trend_line(self):\n      """Fit and display a trend line"""\n      # Fit a polynomial (degree 1 for linear trend)\n      coefficients = np.polyfit(self.x_data, self.y_data, 1)\n      trend_line = np.polyval(coefficients, self.x_data)\n      \n      self.plot_basic_data()\n      self.ax.plot(self.x_data, trend_line, \'r-\', linewidth=2, label=f\'Trend: y = {coefficients[0]:.3f}x + {coefficients[1]:.3f}\')\n      self.ax.legend()\n      self.canvas.draw()\n  \n  def show_moving_average(self):\n      """Calculate and display moving average"""\n      window_size = max(5, len(self.x_data) // 20)  # Adaptive window size\n      \n      # Calculate moving average\n      moving_avg = np.convolve(self.y_data, np.ones(window_size)/window_size, mode=\'valid\')\n      moving_avg_x = self.x_data[window_size-1:]\n      \n      self.plot_basic_data()\n      self.ax.plot(moving_avg_x, moving_avg, \'g-\', linewidth=2, \n                  label=f\'Moving Average (window={window_size})\')\n      self.ax.legend()\n      self.canvas.draw()\n  \n  def reset_view(self):\n      """Reset to basic data view"""\n      self.plot_basic_data()\n\n# Run the application\nif __name__ == "__main__":\n  root = tk.Tk()\n  app = InteractiveAnalyzer(root)\n  root.mainloop()',tooltips:l.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"This interactive analyzer demonstrates:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Real-time Updates"}),": Sliders and radio buttons update the plot immediately as users interact with them, showing the power of combining\nGUI controls with data visualization."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Statistical Analysis"}),": The application calculates and displays relevant statistics, teaching users about data analysis concepts like\ncorrelation and standard deviation."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Multiple Analysis Tools"}),": Users can apply different analysis techniques (trend lines, moving averages) to the same data, helping them\nunderstand how different approaches reveal different aspects of data patterns."]}),"\n"]}),"\n"]}),(0,a.jsx)("br",{}),(0,a.jsxs)(n.h1,{children:["Using Tkinter with the Drones ",(0,a.jsx)("a",{id:"tkinter-with-drones"})]}),(0,a.jsx)(n.p,{children:"Combining Tkinter with drone control creates powerful applications for aerial robotics. We can build control panels that provide both manual drone control and real-time camera feedback, making drone operation more intuitive and safer."}),(0,a.jsx)(n.h2,{children:"Basic Drone Control Panel"}),(0,a.jsx)(n.p,{children:"Let's start with a simple control panel that provides basic drone movements and camera display:"}),(0,a.jsx)(l.zI,{code:'import tkinter as tk\nfrom tkinter import messagebox\nimport cv2\nfrom PIL import Image, ImageTk\nimport threading\nimport time\n\n# Note: You\'ll need to install droneblocks for this to work\n# pip install droneblocks\n\ntry:\n  from droneblocks.DroneBlocksTello import DroneBlocksTello\n  DRONE_AVAILABLE = True\nexcept ImportError:\n  DRONE_AVAILABLE = False\n  print("DroneBlocks not available - running in simulation mode")\n\nclass DroneControlPanel:\n  def __init__(self, root):\n      self.root = root\n      self.root.title("Drone Control Panel")\n      self.root.geometry("1000x700")\n      self.root.protocol("WM_DELETE_WINDOW", self.on_closing)\n      \n      self.drone = None\n      self.camera_running = False\n      self.camera_thread = None\n      self.current_frame = None\n      \n      self.setup_gui()\n      \n      if DRONE_AVAILABLE:\n          self.connect_drone()\n  \n  def setup_gui(self):\n      """Create the drone control interface"""\n      # Main container\n      main_frame = tk.Frame(self.root)\n      main_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n      \n      # Left panel for controls\n      control_frame = tk.Frame(main_frame, width=300, bg="lightgray")\n      control_frame.pack(side=tk.LEFT, fill=tk.Y, padx=(0, 10))\n      control_frame.pack_propagate(False)\n      \n      # Connection status\n      self.status_var = tk.StringVar()\n      self.status_var.set("Disconnected" if not DRONE_AVAILABLE else "Connecting...")\n      status_label = tk.Label(control_frame, textvariable=self.status_var, \n                             font=("Arial", 12, "bold"), bg="lightgray")\n      status_label.pack(pady=10)\n      \n      # Battery display\n      self.battery_var = tk.StringVar()\n      self.battery_var.set("Battery: --")\n      battery_label = tk.Label(control_frame, textvariable=self.battery_var,\n                              font=("Arial", 11), bg="lightgray")\n      battery_label.pack(pady=5)\n      \n      # Flight controls\n      tk.Label(control_frame, text="Flight Controls", font=("Arial", 14, "bold"),\n              bg="lightgray").pack(pady=(20, 10))\n      \n      # Takeoff/Land buttons\n      flight_frame = tk.Frame(control_frame, bg="lightgray")\n      flight_frame.pack(pady=10)\n      \n      self.takeoff_btn = tk.Button(flight_frame, text="TAKEOFF", command=self.takeoff,\n                                  bg="green", fg="white", font=("Arial", 12, "bold"),\n                                  width=10, height=2)\n      self.takeoff_btn.pack(side=tk.LEFT, padx=5)\n      \n      self.land_btn = tk.Button(flight_frame, text="LAND", command=self.land,\n                               bg="red", fg="white", font=("Arial", 12, "bold"),\n                               width=10, height=2)\n      self.land_btn.pack(side=tk.LEFT, padx=5)\n      \n      # Movement controls\n      tk.Label(control_frame, text="Movement Controls", font=("Arial", 12, "bold"),\n              bg="lightgray").pack(pady=(20, 10))\n      \n      # Create movement button grid\n      move_frame = tk.Frame(control_frame, bg="lightgray")\n      move_frame.pack(pady=10)\n      \n      # Forward/Back/Left/Right buttons in cross pattern\n      tk.Button(move_frame, text="↑\nFORWARD", command=lambda: self.move_drone("forward"),\n               width=8, height=2).grid(row=0, column=1, padx=2, pady=2)\n      \n      tk.Button(move_frame, text="←\nLEFT", command=lambda: self.move_drone("left"),\n               width=8, height=2).grid(row=1, column=0, padx=2, pady=2)\n      \n      tk.Button(move_frame, text="→\nRIGHT", command=lambda: self.move_drone("right"),\n               width=8, height=2).grid(row=1, column=2, padx=2, pady=2)\n      \n      tk.Button(move_frame, text="↓\nBACK", command=lambda: self.move_drone("back"),\n               width=8, height=2).grid(row=2, column=1, padx=2, pady=2)\n      \n      # Up/Down controls\n      vertical_frame = tk.Frame(control_frame, bg="lightgray")\n      vertical_frame.pack(pady=10)\n      \n      tk.Button(vertical_frame, text="↑ UP", command=lambda: self.move_drone("up"),\n               bg="lightblue", width=8, height=2).pack(side=tk.LEFT, padx=5)\n      tk.Button(vertical_frame, text="↓ DOWN", command=lambda: self.move_drone("down"),\n               bg="lightcoral", width=8, height=2).pack(side=tk.LEFT, padx=5)\n      \n      # Rotation controls\n      rotation_frame = tk.Frame(control_frame, bg="lightgray")\n      rotation_frame.pack(pady=10)\n      \n      tk.Button(rotation_frame, text="↺ CCW", command=lambda: self.move_drone("ccw"),\n               bg="yellow", width=8, height=2).pack(side=tk.LEFT, padx=5)\n      tk.Button(rotation_frame, text="↻ CW", command=lambda: self.move_drone("cw"),\n               bg="orange", width=8, height=2).pack(side=tk.LEFT, padx=5)\n      \n      # Camera controls\n      tk.Label(control_frame, text="Camera Controls", font=("Arial", 12, "bold"),\n              bg="lightgray").pack(pady=(20, 10))\n      \n      self.camera_btn = tk.Button(control_frame, text="Start Camera", \n                                 command=self.toggle_camera, bg="blue", fg="white",\n                                 width=20, height=2)\n      self.camera_btn.pack(pady=10)\n      \n      # Emergency stop\n      tk.Button(control_frame, text="EMERGENCY STOP", command=self.emergency_stop,\n               bg="darkred", fg="white", font=("Arial", 12, "bold"),\n               width=20, height=2).pack(pady=20)\n      \n      # Right panel for camera feed\n      self.camera_frame = tk.Frame(main_frame, bg="black")\n      self.camera_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)\n      \n      self.camera_label = tk.Label(self.camera_frame, text="Camera Feed\n(Start camera to view)",\n                                  bg="black", fg="white", font=("Arial", 16))\n      self.camera_label.pack(expand=True)\n  \n  def connect_drone(self):\n      """Connect to the drone"""\n      if not DRONE_AVAILABLE:\n          self.status_var.set("Drone library not available")\n          return\n      \n      try:\n          self.drone = DroneBlocksTello()\n          self.drone.connect(True)\n          \n          # Get battery level\n          battery = self.drone.get_battery()\n          self.battery_var.set(f"Battery: {battery}%")\n          self.status_var.set("Connected")\n          \n          # Update battery every 30 seconds\n          self.root.after(30000, self.update_battery)\n          \n      except Exception as e:\n          self.status_var.set("Connection Failed")\n          messagebox.showerror("Connection Error", f"Failed to connect to drone: {str(e)}")\n  \n  def update_battery(self):\n      """Update battery level periodically"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              battery = self.drone.get_battery()\n              self.battery_var.set(f"Battery: {battery}%")\n              \n              # Schedule next update\n              self.root.after(30000, self.update_battery)\n          except:\n              self.battery_var.set("Battery: Error")\n  \n  def takeoff(self):\n      """Make the drone take off"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.takeoff()\n              messagebox.showinfo("Takeoff", "Drone taking off!")\n          except Exception as e:\n              messagebox.showerror("Takeoff Error", f"Failed to takeoff: {str(e)}")\n      else:\n          messagebox.showinfo("Simulation", "Takeoff command sent (simulation mode)")\n  \n  def land(self):\n      """Make the drone land"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.land()\n              messagebox.showinfo("Landing", "Drone landing!")\n          except Exception as e:\n              messagebox.showerror("Landing Error", f"Failed to land: {str(e)}")\n      else:\n          messagebox.showinfo("Simulation", "Land command sent (simulation mode)")\n  \n  def move_drone(self, direction):\n      """Move the drone in the specified direction"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              distance = 30  # Move 30cm each time\n              \n              if direction == "forward":\n                  self.drone.move_forward(distance)\n              elif direction == "back":\n                  self.drone.move_back(distance)\n              elif direction == "left":\n                  self.drone.move_left(distance)\n              elif direction == "right":\n                  self.drone.move_right(distance)\n              elif direction == "up":\n                  self.drone.move_up(distance)\n              elif direction == "down":\n                  self.drone.move_down(distance)\n              elif direction == "cw":\n                  self.drone.rotate_clockwise(45)  # 45 degree rotation\n              elif direction == "ccw":\n                  self.drone.rotate_counter_clockwise(45)\n                  \n          except Exception as e:\n              messagebox.showerror("Movement Error", f"Failed to move {direction}: {str(e)}")\n      else:\n          print(f"Simulation: Moving {direction}")\n  \n  def toggle_camera(self):\n      """Start or stop the camera feed"""\n      if not self.camera_running:\n          self.start_camera()\n      else:\n          self.stop_camera()\n  \n  def start_camera(self):\n      """Start the camera feed"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.streamon()\n              self.camera_running = True\n              self.camera_btn.config(text="Stop Camera", bg="red")\n              \n              # Start camera thread\n              self.camera_thread = threading.Thread(target=self.camera_loop, daemon=True)\n              self.camera_thread.start()\n              \n          except Exception as e:\n              messagebox.showerror("Camera Error", f"Failed to start camera: {str(e)}")\n      else:\n          # Simulation mode - show placeholder\n          self.camera_running = True\n          self.camera_btn.config(text="Stop Camera", bg="red")\n          self.camera_label.config(text="Camera Active\n(Simulation Mode)")\n  \n  def camera_loop(self):\n      """Main camera loop running in separate thread"""\n      while self.camera_running and self.drone and DRONE_AVAILABLE:\n          try:\n              # Get frame from drone\n              frame = self.drone.get_frame_read().frame\n              \n              if frame is not None:\n                  # Resize frame for display\n                  frame = cv2.resize(frame, (640, 480))\n                  \n                  # Convert BGR to RGB\n                  frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n                  \n                  # Convert to PIL Image\n                  pil_image = Image.fromarray(frame_rgb)\n                  photo = ImageTk.PhotoImage(pil_image)\n                  \n                  # Update GUI in main thread\n                  self.root.after(0, self.update_camera_display, photo)\n                  \n              time.sleep(0.03)  # ~30 FPS\n              \n          except Exception as e:\n              print(f"Camera error: {e}")\n              break\n  \n  def update_camera_display(self, photo):\n      """Update the camera display (called from main thread)"""\n      if self.camera_running:\n          self.camera_label.config(image=photo, text="")\n          self.camera_label.image = photo  # Keep reference\n  \n  def stop_camera(self):\n      """Stop the camera feed"""\n      self.camera_running = False\n      self.camera_btn.config(text="Start Camera", bg="blue")\n      \n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.streamoff()\n          except:\n              pass\n      \n      # Reset camera display\n      self.camera_label.config(image="", text="Camera Feed\n(Start camera to view)")\n      self.camera_label.image = None\n  \n  def emergency_stop(self):\n      """Emergency stop - land immediately"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.emergency()\n              messagebox.showwarning("Emergency Stop", "Emergency stop activated!")\n          except Exception as e:\n              messagebox.showerror("Emergency Error", f"Emergency stop failed: {str(e)}")\n      else:\n          messagebox.showwarning("Simulation", "Emergency stop activated (simulation mode)")\n  \n  def on_closing(self):\n      """Handle window closing"""\n      if self.camera_running:\n          self.stop_camera()\n      \n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.land()  # Safety landing\n              time.sleep(1)\n          except:\n              pass\n      \n      self.root.destroy()\n\n# Run the application\nif __name__ == "__main__":\n  root = tk.Tk()\n  app = DroneControlPanel(root)\n  root.mainloop()',tooltips:l.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"This drone control panel provides:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Safety Features"}),": Emergency stop button and automatic landing when the application closes, ensuring safe drone operation."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Real-time Camera"}),": Live video feed from the drone's camera, displayed directly in the GUI using threading to prevent interface freezing."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Intuitive Controls"}),": Button layout that matches natural movement directions, making it easy for users to control the drone."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Status Monitoring"}),": Battery level and connection status display, helping users monitor drone health."]}),"\n"]}),"\n"]}),(0,a.jsx)(n.h2,{children:"Advanced Drone Control with Computer Vision"}),(0,a.jsx)(n.p,{children:"Let's create a more advanced application that combines drone control with computer vision analysis:"}),(0,a.jsx)(l.zI,{code:'import tkinter as tk\nfrom tkinter import messagebox, filedialog, ttk\nimport cv2\nfrom PIL import Image, ImageTk\nimport threading\nimport time\nimport numpy as np\n\n# Drone library (install with pip install droneblocks)\ntry:\n  from droneblocks.DroneBlocksTello import DroneBlocksTello\n  DRONE_AVAILABLE = True\nexcept ImportError:\n  DRONE_AVAILABLE = False\n\nclass AdvancedDroneInterface:\n  def __init__(self, root):\n      self.root = root\n      self.root.title("Advanced Drone Control with Computer Vision")\n      self.root.geometry("1400x900")\n      self.root.protocol("WM_DELETE_WINDOW", self.on_closing)\n      \n      self.drone = None\n      self.camera_running = False\n      self.camera_thread = None\n      self.current_frame = None\n      self.processed_frame = None\n      \n      # Computer vision settings\n      self.cv_enabled = tk.BooleanVar()\n      self.cv_mode = tk.StringVar(value="original")\n      self.color_detection_enabled = tk.BooleanVar()\n      \n      # Color detection parameters (HSV values)\n      self.hue_min = tk.IntVar(value=100)\n      self.hue_max = tk.IntVar(value=130)\n      self.sat_min = tk.IntVar(value=50)\n      self.sat_max = tk.IntVar(value=255)\n      self.val_min = tk.IntVar(value=50)\n      self.val_max = tk.IntVar(value=255)\n      \n      self.setup_gui()\n      \n      if DRONE_AVAILABLE:\n          self.connect_drone()\n  \n  def setup_gui(self):\n      """Create the advanced interface"""\n      # Create notebook for tabbed interface\n      self.notebook = ttk.Notebook(self.root)\n      self.notebook.pack(fill=tk.BOTH, expand=True, padx=5, pady=5)\n      \n      # Tab 1: Drone Control\n      self.control_tab = ttk.Frame(self.notebook)\n      self.notebook.add(self.control_tab, text="Drone Control")\n      self.setup_control_tab()\n      \n      # Tab 2: Computer Vision\n      self.vision_tab = ttk.Frame(self.notebook)\n      self.notebook.add(self.vision_tab, text="Computer Vision")\n      self.setup_vision_tab()\n      \n      # Tab 3: Data Analysis\n      self.analysis_tab = ttk.Frame(self.notebook)\n      self.notebook.add(self.analysis_tab, text="Flight Data")\n      self.setup_analysis_tab()\n  \n  def setup_control_tab(self):\n      """Setup the drone control interface"""\n      # Left panel - controls\n      control_frame = tk.Frame(self.control_tab, width=350, bg="lightgray")\n      control_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=5)\n      control_frame.pack_propagate(False)\n      \n      # Status section\n      tk.Label(control_frame, text="Drone Status", font=("Arial", 14, "bold"),\n              bg="lightgray").pack(pady=10)\n      \n      self.status_var = tk.StringVar()\n      self.status_var.set("Disconnected" if not DRONE_AVAILABLE else "Connecting...")\n      tk.Label(control_frame, textvariable=self.status_var, font=("Arial", 12),\n              bg="lightgray").pack()\n      \n      self.battery_var = tk.StringVar(value="Battery: --")\n      tk.Label(control_frame, textvariable=self.battery_var, font=("Arial", 11),\n              bg="lightgray").pack(pady=5)\n      \n      # Flight controls\n      flight_frame = tk.LabelFrame(control_frame, text="Flight Controls", \n                                 font=("Arial", 12, "bold"), bg="lightgray")\n      flight_frame.pack(fill=tk.X, padx=10, pady=10)\n      \n      # Main flight buttons\n      button_frame = tk.Frame(flight_frame, bg="lightgray")\n      button_frame.pack(pady=10)\n      \n      tk.Button(button_frame, text="TAKEOFF", command=self.takeoff,\n               bg="green", fg="white", font=("Arial", 11, "bold"),\n               width=12, height=2).pack(side=tk.LEFT, padx=5)\n      \n      tk.Button(button_frame, text="LAND", command=self.land,\n               bg="red", fg="white", font=("Arial", 11, "bold"),\n               width=12, height=2).pack(side=tk.LEFT, padx=5)\n      \n      # Movement controls in a grid\n      move_frame = tk.LabelFrame(control_frame, text="Movement", \n                               font=("Arial", 12, "bold"), bg="lightgray")\n      move_frame.pack(fill=tk.X, padx=10, pady=10)\n      \n      # Create movement grid\n      grid_frame = tk.Frame(move_frame, bg="lightgray")\n      grid_frame.pack(pady=10)\n      \n      # Movement buttons with improved layout\n      movements = [\n          ("↑", "forward", 0, 1),\n          ("←", "left", 1, 0),\n          ("•", "stop", 1, 1),  # Center stop button\n          ("→", "right", 1, 2),\n          ("↓", "back", 2, 1)\n      ]\n      \n      for symbol, direction, row, col in movements:\n          if direction == "stop":\n              btn = tk.Button(grid_frame, text=symbol, command=self.stop_movement,\n                             bg="gray", fg="white", width=4, height=2)\n          else:\n              btn = tk.Button(grid_frame, text=symbol, \n                             command=lambda d=direction: self.move_drone(d),\n                             width=4, height=2)\n          btn.grid(row=row, column=col, padx=2, pady=2)\n      \n      # Vertical controls\n      vertical_frame = tk.Frame(move_frame, bg="lightgray")\n      vertical_frame.pack(pady=5)\n      \n      tk.Button(vertical_frame, text="↑ UP", command=lambda: self.move_drone("up"),\n               bg="lightblue", width=8).pack(side=tk.LEFT, padx=5)\n      tk.Button(vertical_frame, text="↓ DOWN", command=lambda: self.move_drone("down"),\n               bg="lightcoral", width=8).pack(side=tk.LEFT, padx=5)\n      \n      # Camera controls\n      camera_frame = tk.LabelFrame(control_frame, text="Camera", \n                                 font=("Arial", 12, "bold"), bg="lightgray")\n      camera_frame.pack(fill=tk.X, padx=10, pady=10)\n      \n      self.camera_btn = tk.Button(camera_frame, text="Start Camera", \n                                 command=self.toggle_camera, bg="blue", fg="white",\n                                 width=25, height=2)\n      self.camera_btn.pack(pady=10)\n      \n      tk.Button(camera_frame, text="Capture Image", command=self.capture_image,\n               bg="purple", fg="white", width=25).pack(pady=5)\n      \n      # Emergency stop\n      tk.Button(control_frame, text="EMERGENCY STOP", command=self.emergency_stop,\n               bg="darkred", fg="white", font=("Arial", 12, "bold"),\n               width=25, height=3).pack(pady=20)\n      \n      # Right panel - camera feed\n      self.camera_frame = tk.Frame(self.control_tab, bg="black")\n      self.camera_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)\n      \n      self.camera_label = tk.Label(self.camera_frame, text="Camera Feed\n(Start camera to view)",\n                                  bg="black", fg="white", font=("Arial", 18))\n      self.camera_label.pack(expand=True)\n  \n  def setup_vision_tab(self):\n      """Setup the computer vision analysis tab"""\n      # Left panel - CV controls\n      cv_control_frame = tk.Frame(self.vision_tab, width=400, bg="lightyellow")\n      cv_control_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=5)\n      cv_control_frame.pack_propagate(False)\n      \n      tk.Label(cv_control_frame, text="Computer Vision Controls", \n              font=("Arial", 14, "bold"), bg="lightyellow").pack(pady=10)\n      \n      # CV mode selection\n      mode_frame = tk.LabelFrame(cv_control_frame, text="Processing Mode", \n                               font=("Arial", 12, "bold"), bg="lightyellow")\n      mode_frame.pack(fill=tk.X, padx=10, pady=10)\n      \n      modes = [\n          ("Original", "original"),\n          ("Grayscale", "grayscale"),\n          ("Edge Detection", "edges"),\n          ("Blur", "blur"),\n          ("Color Detection", "color")\n      ]\n      \n      for text, value in modes:\n          tk.Radiobutton(mode_frame, text=text, variable=self.cv_mode,\n                        value=value, bg="lightyellow", \n                        command=self.update_cv_mode).pack(anchor=tk.W)\n      \n      # Color detection controls\n      color_frame = tk.LabelFrame(cv_control_frame, text="Color Detection Settings", \n                                font=("Arial", 12, "bold"), bg="lightyellow")\n      color_frame.pack(fill=tk.X, padx=10, pady=10)\n      \n      # HSV sliders\n      self.create_hsv_slider(color_frame, "Hue Min", self.hue_min, 0, 179)\n      self.create_hsv_slider(color_frame, "Hue Max", self.hue_max, 0, 179)\n      self.create_hsv_slider(color_frame, "Sat Min", self.sat_min, 0, 255)\n      self.create_hsv_slider(color_frame, "Sat Max", self.sat_max, 0, 255)\n      self.create_hsv_slider(color_frame, "Val Min", self.val_min, 0, 255)\n      self.create_hsv_slider(color_frame, "Val Max", self.val_max, 0, 255)\n      \n      # Preset color buttons\n      preset_frame = tk.Frame(color_frame, bg="lightyellow")\n      preset_frame.pack(fill=tk.X, pady=10)\n      \n      tk.Label(preset_frame, text="Color Presets:", bg="lightyellow").pack()\n      \n      presets = [\n          ("Blue", (100, 130, 50, 255, 50, 255)),\n          ("Red", (0, 10, 120, 255, 70, 255)),\n          ("Green", (40, 80, 50, 255, 50, 255)),\n          ("Yellow", (20, 30, 100, 255, 100, 255))\n      ]\n      \n      preset_btn_frame = tk.Frame(preset_frame, bg="lightyellow")\n      preset_btn_frame.pack()\n      \n      for color_name, (h_min, h_max, s_min, s_max, v_min, v_max) in presets:\n          tk.Button(preset_btn_frame, text=color_name, \n                   command=lambda p=(h_min, h_max, s_min, s_max, v_min, v_max): self.set_color_preset(p),\n                   width=8).pack(side=tk.LEFT, padx=2)\n      \n      # Analysis results\n      results_frame = tk.LabelFrame(cv_control_frame, text="Analysis Results", \n                                  font=("Arial", 12, "bold"), bg="lightyellow")\n      results_frame.pack(fill=tk.X, padx=10, pady=10)\n      \n      self.results_text = tk.Text(results_frame, height=10, width=40, font=("Courier", 9))\n      self.results_text.pack(padx=5, pady=5)\n      \n      # Right panel - processed image display\n      self.vision_display_frame = tk.Frame(self.vision_tab, bg="black")\n      self.vision_display_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5, pady=5)\n      \n      self.vision_label = tk.Label(self.vision_display_frame, \n                                 text="Computer Vision Display\n(Start camera for live analysis)",\n                                 bg="black", fg="white", font=("Arial", 16))\n      self.vision_label.pack(expand=True)\n  \n  def setup_analysis_tab(self):\n      """Setup the flight data analysis tab"""\n      # This would contain flight data logging and analysis\n      analysis_frame = tk.Frame(self.analysis_tab, bg="lightgreen")\n      analysis_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)\n      \n      tk.Label(analysis_frame, text="Flight Data Analysis", \n              font=("Arial", 16, "bold"), bg="lightgreen").pack(pady=20)\n      \n      tk.Label(analysis_frame, \n              text="This section would contain:\n\n" +\n                   "• Flight path tracking\n" +\n                   "• Battery usage analysis\n" +\n                   "• Movement pattern visualization\n" +\n                   "• Performance metrics\n" +\n                   "• Data export functionality",\n              font=("Arial", 12), bg="lightgreen", justify=tk.LEFT).pack(pady=20)\n  \n  def create_hsv_slider(self, parent, label, variable, min_val, max_val):\n      """Create an HSV adjustment slider"""\n      frame = tk.Frame(parent, bg="lightyellow")\n      frame.pack(fill=tk.X, pady=2)\n      \n      tk.Label(frame, text=f"{label}:", bg="lightyellow", width=8).pack(side=tk.LEFT)\n      scale = tk.Scale(frame, from_=min_val, to=max_val, orient=tk.HORIZONTAL,\n                      variable=variable, command=self.update_color_detection)\n      scale.pack(side=tk.LEFT, fill=tk.X, expand=True)\n      \n      value_label = tk.Label(frame, textvariable=variable, bg="lightyellow", width=4)\n      value_label.pack(side=tk.RIGHT)\n  \n  def set_color_preset(self, preset_values):\n      """Set HSV values to a color preset"""\n      h_min, h_max, s_min, s_max, v_min, v_max = preset_values\n      \n      self.hue_min.set(h_min)\n      self.hue_max.set(h_max)\n      self.sat_min.set(s_min)\n      self.sat_max.set(s_max)\n      self.val_min.set(v_min)\n      self.val_max.set(v_max)\n  \n  def update_cv_mode(self):\n      """Update computer vision processing mode"""\n      pass  # Processing happens in camera loop\n  \n  def update_color_detection(self, event=None):\n      """Update color detection parameters"""\n      pass  # Updates happen in camera loop\n  \n  def connect_drone(self):\n      """Connect to the drone"""\n      if not DRONE_AVAILABLE:\n          print("Drone Lib Unavailable!")\n          self.status_var.set("Drone library not available")\n          return\n      \n      try:\n          print("Attempting connection!")\n          self.drone = DroneBlocksTello()\n          self.drone.connect(True)\n          \n          battery = self.drone.get_battery()\n          self.battery_var.set(f"Battery: {battery}%")\n          self.status_var.set("Connected")\n          \n          self.root.after(30000, self.update_battery)\n          \n      except Exception as e:\n          self.status_var.set("Connection Failed")\n          messagebox.showerror("Connection Error", f"Failed to connect: {str(e)}")\n  \n  def update_battery(self):\n      """Update battery level"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              battery = self.drone.get_battery()\n              self.battery_var.set(f"Battery: {battery}%")\n              self.root.after(30000, self.update_battery)\n          except:\n              self.battery_var.set("Battery: Error")\n  \n  def takeoff(self):\n      """Drone takeoff"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.takeoff()\n              messagebox.showinfo("Takeoff", "Drone taking off!")\n          except Exception as e:\n              messagebox.showerror("Error", f"Takeoff failed: {str(e)}")\n      else:\n          messagebox.showinfo("Simulation", "Takeoff (simulation)")\n  \n  def land(self):\n      """Drone landing"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.land()\n              messagebox.showinfo("Landing", "Drone landing!")\n          except Exception as e:\n              messagebox.showerror("Error", f"Landing failed: {str(e)}")\n      else:\n          messagebox.showinfo("Simulation", "Landing (simulation)")\n  \n  def move_drone(self, direction):\n      """Move drone in specified direction"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              distance = 30\n              \n              if direction == "forward":\n                  self.drone.move_forward(distance)\n              elif direction == "back":\n                  self.drone.move_back(distance)\n              elif direction == "left":\n                  self.drone.move_left(distance)\n              elif direction == "right":\n                  self.drone.move_right(distance)\n              elif direction == "up":\n                  self.drone.move_up(distance)\n              elif direction == "down":\n                  self.drone.move_down(distance)\n                  \n          except Exception as e:\n              messagebox.showerror("Movement Error", f"Failed to move {direction}: {str(e)}")\n      else:\n          print(f"Simulation: Moving {direction}")\n  \n  def stop_movement(self):\n      """Stop all drone movement"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.send_rc_control(0, 0, 0, 0)  # Stop all movement\n          except Exception as e:\n              messagebox.showerror("Stop Error", f"Failed to stop: {str(e)}")\n      else:\n          print("Simulation: Stop movement")\n  \n  def emergency_stop(self):\n      """Emergency stop"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.emergency()\n              messagebox.showwarning("Emergency", "Emergency stop activated!")\n          except Exception as e:\n              messagebox.showerror("Emergency Error", f"Emergency failed: {str(e)}")\n      else:\n          messagebox.showwarning("Simulation", "Emergency stop (simulation)")\n  \n  def toggle_camera(self):\n      """Start or stop camera"""\n      if not self.camera_running:\n          self.start_camera()\n      else:\n          self.stop_camera()\n  \n  def start_camera(self):\n      """Start camera feed"""\n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.streamon()\n              self.camera_running = True\n              self.camera_btn.config(text="Stop Camera", bg="red")\n              \n              self.camera_thread = threading.Thread(target=self.camera_loop, daemon=True)\n              self.camera_thread.start()\n              \n          except Exception as e:\n              messagebox.showerror("Camera Error", f"Failed to start camera: {str(e)}")\n      else:\n          # Simulation mode\n          self.camera_running = True\n          self.camera_btn.config(text="Stop Camera", bg="red")\n          self.camera_label.config(text="Camera Active\n(Simulation Mode)")\n          self.vision_label.config(text="CV Analysis Active\n(Simulation Mode)")\n  \n  def camera_loop(self):\n      """Main camera processing loop"""\n      while self.camera_running and self.drone and DRONE_AVAILABLE:\n          try:\n              frame = self.drone.get_frame_read().frame\n              \n              if frame is not None:\n                  # Resize for processing\n                  frame = cv2.resize(frame, (640, 480))\n                  self.current_frame = frame.copy()\n                  \n                  # Apply computer vision processing\n                  processed_frame = self.process_frame(frame)\n                  \n                  # Convert for display\n                  display_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n                  processed_display = cv2.cvtColor(processed_frame, cv2.COLOR_BGR2RGB) if len(processed_frame.shape) == 3 else cv2.cvtColor(processed_frame, cv2.COLOR_GRAY2RGB)\n                  \n                  # Update displays\n                  self.root.after(0, self.update_camera_displays, display_frame, processed_display)\n                  \n              time.sleep(0.03)  # ~30 FPS\n              \n          except Exception as e:\n              print(f"Camera error: {e}")\n              break\n  \n  def process_frame(self, frame):\n      """Process frame based on selected CV mode"""\n      mode = self.cv_mode.get()\n      \n      if mode == "original":\n          return frame\n      elif mode == "grayscale":\n          return cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n      elif mode == "edges":\n          gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)\n          return cv2.Canny(gray, 100, 200)\n      elif mode == "blur":\n          return cv2.GaussianBlur(frame, (15, 15), 0)\n      elif mode == "color":\n          return self.detect_color(frame)\n      \n      return frame\n  \n  def detect_color(self, frame):\n      """Detect specified color in frame"""\n      hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n      \n      # Get HSV range from sliders\n      lower = np.array([self.hue_min.get(), self.sat_min.get(), self.val_min.get()])\n      upper = np.array([self.hue_max.get(), self.sat_max.get(), self.val_max.get()])\n      \n      # Create mask\n      mask = cv2.inRange(hsv, lower, upper)\n      \n      # Find contours\n      contours, _ = cv2.findContours(mask, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n      \n      # Draw contours on original frame\n      result = frame.copy()\n      cv2.drawContours(result, contours, -1, (0, 255, 0), 2)\n      \n      # Calculate total area\n      total_area = sum(cv2.contourArea(contour) for contour in contours)\n      \n      # Update analysis results\n      self.root.after(0, self.update_analysis_results, len(contours), total_area)\n      \n      return result\n  \n  def update_analysis_results(self, contour_count, total_area):\n      """Update the analysis results display"""\n      results = f"""Color Detection Analysis:\n\nContours Found: {contour_count}\nTotal Area: {total_area:.0f} pixels\n\nHSV Range:\nHue: {self.hue_min.get()} - {self.hue_max.get()}\nSaturation: {self.sat_min.get()} - {self.sat_max.get()}\nValue: {self.val_min.get()} - {self.val_max.get()}\n\nDetection Quality: {"Good" if total_area > 1000 else "Poor"}\n"""\n      \n      self.results_text.delete(1.0, tk.END)\n      self.results_text.insert(1.0, results)\n  \n  def update_camera_displays(self, original_frame, processed_frame):\n      """Update both camera displays"""\n      if self.camera_running:\n          # Update main camera display\n          pil_original = Image.fromarray(original_frame)\n          photo_original = ImageTk.PhotoImage(pil_original)\n          self.camera_label.config(image=photo_original, text="")\n          self.camera_label.image = photo_original\n          \n          # Update computer vision display\n          pil_processed = Image.fromarray(processed_frame)\n          photo_processed = ImageTk.PhotoImage(pil_processed)\n          self.vision_label.config(image=photo_processed, text="")\n          self.vision_label.image = photo_processed\n  \n  def capture_image(self):\n      """Capture and save current frame"""\n      if self.current_frame is not None:\n          filename = filedialog.asksaveasfilename(\n              title="Save Image",\n              defaultextension=".png",\n              filetypes=[("PNG files", "*.png"), ("JPEG files", "*.jpg")]\n          )\n          \n          if filename:\n              cv2.imwrite(filename, self.current_frame)\n              messagebox.showinfo("Image Saved", f"Image saved as {filename}")\n      else:\n          messagebox.showwarning("No Image", "No image to capture!")\n  \n  def stop_camera(self):\n      """Stop camera feed"""\n      self.camera_running = False\n      self.camera_btn.config(text="Start Camera", bg="blue")\n      \n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.streamoff()\n          except:\n              pass\n      \n      # Reset displays\n      self.camera_label.config(image="", text="Camera Feed\n(Start camera to view)")\n      self.camera_label.image = None\n      self.vision_label.config(image="", text="Computer Vision Display\n(Start camera for live analysis)")\n      self.vision_label.image = None\n  \n  def on_closing(self):\n      """Handle application closing"""\n      if self.camera_running:\n          self.stop_camera()\n      \n      if self.drone and DRONE_AVAILABLE:\n          try:\n              self.drone.land()\n              time.sleep(1)\n          except:\n              pass\n      \n      self.root.destroy()\n\n# Run the application\nif __name__ == "__main__":\n  root = tk.Tk()\n  app = AdvancedDroneInterface(root)\n  root.mainloop()',tooltips:l.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"This advanced drone interface demonstrates:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Tabbed Interface"}),": Using ",(0,a.jsx)(n.code,{children:"ttk.Notebook"})," to organize different functionalities into separate tabs, making the interface cleaner and more\norganized."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Real-time Computer Vision"}),": Live processing of drone camera feed with multiple analysis modes including edge detection, color detection,\nand custom HSV filtering."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Interactive Controls"}),": Sliders and controls for adjusting computer vision parameters in real-time, allowing users to tune detection\nalgorithms on the fly."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Safety Integration"}),": Proper shutdown procedures that ensure the drone lands safely when the application closes."]}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsxs)(n.p,{children:[(0,a.jsx)(n.strong,{children:"Data Analysis Framework"}),": Structure for collecting and analyzing flight data, which could be extended to include flight path tracking,\nperformance metrics, and data export capabilities."]}),"\n"]}),"\n"]}),(0,a.jsx)("br",{}),(0,a.jsx)(n.p,{children:"The combination of Tkinter with drone control and computer vision creates powerful applications for educational robotics, research, and\npractical drone applications. Students can use these tools to explore concepts in robotics, computer vision, and human-computer interaction\nwhile working with real hardware."}),(0,a.jsx)(n.p,{children:"This tutorial progression from basic GUI applications to advanced drone control systems demonstrates how Tkinter can scale from simple\ndesktop applications to complex, multi-threaded applications that integrate with external hardware and advanced computer vision algorithms."})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.jsx)(i,{...e,children:(0,a.jsx)(f,{...e})})}},1966:(e,n,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/python/tkinter-intro",function(){return t(796)}])}},e=>{var n=n=>e(e.s=n);e.O(0,[809,636,593,792],()=>n(1966)),_N_E=e.O()}]);