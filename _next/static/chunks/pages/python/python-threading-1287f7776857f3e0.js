(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[500],{5911:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>l});var a=t(7876),r=t(3923),i=t(8144),s=t(6004),d=t(1621),o=t(9254);let h=function(e){let{children:n}=e;return(0,a.jsx)(i.S,{children:n})};function c(e){let n={code:"code",em:"em",h1:"h1",h3:"h3",li:"li",p:"p",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(s.A,{children:[(0,a.jsx)(n.h3,{children:"Prerequisites:"}),(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)("a",{href:"/python/python-basics",children:"Python: Basics"}),"\n"]}),"\n",(0,a.jsxs)(n.li,{children:["\n",(0,a.jsx)("a",{href:"/python/python-functions",children:"Python: Functions"}),"\n"]}),"\n"]}),(0,a.jsx)("br",{}),(0,a.jsx)("br",{}),(0,a.jsx)(n.h1,{children:"What is a Thread?"}),(0,a.jsx)(n.p,{children:"A thread is a second line of execution. We outlined that Python looks at your code line by line, and follows the control-flow. Creating a\nthread creates another control-flow, which Python will switch between running. Code running in a thread runs like it's a separate program,\nbut it will share global variables with other threads and with the main program. A thread will also keep access to variables/data that was\ndefined in the scope it was created in. Threads can be created, and the code that created a thread can wait for it to finish. Threads in\nPython expect to be passed a function to execute alongside the parameters to execute it with. They will run the function until it\nexits/returns, at which point the thread will die."}),(0,a.jsx)(n.h1,{children:"Using Threads"}),(0,a.jsxs)(n.p,{children:["To create threads we need to use the ",(0,a.jsx)(n.code,{children:"threading"})," module. It will provide all the tools necessary to make and manage a thread."]}),(0,a.jsx)(d.zI,{code:"import threading",tooltips:d.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"Once we've imported threading, creating a thread is pretty simple. We just need a function and some parameters. If our list of parameters is\nempty we still need to pass an empty tuple, but otherwise there's no special requirements."}),(0,a.jsx)(d.zI,{code:'import threading\n\ndef thread_function():\n  print("Thread ran")\n\nthread = threading.Thread(target=thread_function, args=())',tooltips:d.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsxs)(n.p,{children:["Now once we've created a thread, it doesn't actually ",(0,a.jsx)(n.em,{children:"do"})," anything until we start it. Starting it will run its code."]}),(0,a.jsx)(d.zI,{code:'import threading\n\ndef thread_function():\n  print("Thread ran")\n\nthread = threading.Thread(target=thread_function, args=())\nthread.start()',tooltips:d.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"Output:"}),(0,a.jsx)(o.A,{children:(0,a.jsx)(n.p,{children:"Thread ran"})}),(0,a.jsx)("br",{}),(0,a.jsxs)(n.p,{children:["We can use ",(0,a.jsx)(n.code,{children:"thread.join()"})," to wait for a thread to finish execution. Consider these examples with and without the the join:"]}),(0,a.jsx)(d.zI,{code:'import threading\nimport time\n\ndef thread_function():\n  for i in range(0, 5):\n      time.sleep(1)\n      print("Thread Ran")\n\nthread = threading.Thread(target=thread_function, args=())\nthread.start()\nprint("Main Code Ran")\n# thread.join()\nprint("Main Code Finished")',tooltips:d.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"Output:"}),(0,a.jsx)(o.A,{children:(0,a.jsx)(n.p,{children:"Main Code Ran\nMain Code Finished\nThread Ran\nThread Ran\nThread Ran\nThread Ran\nThread Ran"})}),(0,a.jsxs)(n.p,{children:["Now if we uncomment ",(0,a.jsx)(n.code,{children:"thread.join()"}),":"]}),(0,a.jsx)(d.zI,{code:'import threading\nimport time\n\ndef thread_function():\n  for i in range(0, 5):\n      time.sleep(1)\n      print("Thread Ran")\n\nthread = threading.Thread(target=thread_function, args=())\nthread.start()\nprint("Main Code Ran")\nthread.join()\nprint("Main Code Finished")',tooltips:d.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"Output:"}),(0,a.jsx)(o.A,{children:(0,a.jsx)(n.p,{children:"Main Code Ran\nThread Ran\nThread Ran\nThread Ran\nThread Ran\nThread Ran\nMain Code Finished"})}),(0,a.jsxs)(n.p,{children:["We can see that our main loop waited at ",(0,a.jsx)(n.code,{children:"thread.join"})," until it was over. Remember that ",(0,a.jsx)(n.code,{children:"thread"})," is a variable, and so it's only\nwaiting for that specific thread to end. If we wanted to wait for multiple threads to end, we would need multiple join statements."]}),(0,a.jsxs)(n.p,{children:["We can also do stuff before we wait for a thread to finish. For instance, we might start a separate thread to do a calculation for a variable\n",(0,a.jsx)(n.code,{children:"x"}),", do all the parts of the calculation that don't require x, and then wait for the thread to finish so we can do the remaining calculations. This would be ineffective at speeding the program up, but might let us perform other tasks for the user."]}),(0,a.jsx)(n.p,{children:"And remember, we can pass parameters to Threads though we must pass them in a Tuple, and the Tuple most have an open element at the end\n(meaning it ends in a comma instead of a container element). Consider this example:"}),(0,a.jsx)(d.zI,{code:'import threading\nimport time\n\ndef thread_function(data):\n  for i in range(0, 5):\n      time.sleep(1)\n      print("Data: " + data)\n\nthread = threading.Thread(target=thread_function, args=("Test",))\nthread.start()\nprint("Main Code Ran")\nthread.join()\nprint("Main Code Finished")',tooltips:d.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,a.jsx)(n.p,{children:"Output:"}),(0,a.jsx)(o.A,{children:(0,a.jsx)(n.p,{children:"Main Code Ran\nData: Test\nData: Test\nData: Test\nData: Test\nData: Test\nMain Code Finished"})}),(0,a.jsxs)(n.p,{children:['Look at this example, and look at the "args" parameter. Its value is ',(0,a.jsx)(n.code,{children:'("Test",)'})," rather than ",(0,a.jsx)(n.code,{children:'("Test")'}),". This is intentional and\nrequired for passing parameters to the threading module."]}),(0,a.jsx)("br",{}),(0,a.jsx)(n.h1,{children:"Thread Locks"}),(0,a.jsx)("br",{}),(0,a.jsx)(n.h1,{children:"Using Threads"}),(0,a.jsx)(n.p,{children:"We use threads when we have multiple things we want to do, but don't want to create our own system for switching between tasks. In our case,\nthreads are useful for switching between sending the drone commands and getting the camera feed, for instance."}),(0,a.jsx)(n.p,{children:"Threads will continue to run after your main line of execution is over, so do not create threads you cannot stop/infinite threads without an\nexit condition. If you do, use the Task Manager on your computer to kill it. Do not command the drone from a thread, always use the main\nthread for drone commands."})]})}function l(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.jsx)(h,{...e,children:(0,a.jsx)(c,{...e})})}},6216:(e,n,t)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/python/python-threading",function(){return t(5911)}])},9254:(e,n,t)=>{"use strict";t.d(n,{A:()=>r});var a=t(7876);function r(e){let{title:n="Terminal",children:t,className:r=""}=e;return(0,a.jsxs)("div",{className:"rounded-md border border-[#2e2e2e] bg-[#1e1e1e] text-[#d4d4d4] font-mono mb-3 ".concat(r),children:[(0,a.jsx)("div",{className:"flex justify-between items-center px-4 py-2.5 border-b border-[#2e2e2e] bg-[#2b2b2b]",children:(0,a.jsx)("span",{className:"text-sm text-[#dcdcdc]",children:n})}),(0,a.jsx)("pre",{className:"px-4 py-3 pb-1 pl-10 overflow-x-auto text-sm leading-relaxed whitespace-pre-wrap m-0",children:(0,a.jsx)("code",{className:"text-[#f0f0f0]",children:"string"==typeof t?t.trimEnd().split("\n").map((e,n)=>e.includes("Traceback")?(0,a.jsx)("div",{className:"text-yellow-400",children:e},n):e.includes("NameError")?(0,a.jsx)("div",{className:"text-red-500 font-semibold",children:e},n):(0,a.jsx)("div",{children:e},n)):t})})]})}}},e=>{var n=n=>e(e.s=n);e.O(0,[809,636,593,792],()=>n(6216)),_N_E=e.O()}]);