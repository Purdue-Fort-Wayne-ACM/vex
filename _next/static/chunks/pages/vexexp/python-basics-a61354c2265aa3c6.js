(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[181],{4746:(e,n,s)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/vexexp/python-basics",function(){return s(9900)}])},9254:(e,n,s)=>{"use strict";s.d(n,{A:()=>o});var t=s(7876);function o(e){let{title:n="Terminal",children:s,className:o=""}=e;return(0,t.jsxs)("div",{className:"rounded-md border border-[#2e2e2e] bg-[#1e1e1e] text-[#d4d4d4] font-mono mb-3 ".concat(o),children:[(0,t.jsx)("div",{className:"flex justify-between items-center px-4 py-2.5 border-b border-[#2e2e2e] bg-[#2b2b2b]",children:(0,t.jsx)("span",{className:"text-sm text-[#dcdcdc]",children:n})}),(0,t.jsx)("pre",{className:"px-4 py-3 pb-1 pl-10 overflow-x-auto text-sm leading-relaxed whitespace-pre-wrap m-0",children:(0,t.jsx)("code",{className:"text-[#f0f0f0]",children:"string"==typeof s?s.trimEnd().split("\n").map((e,n)=>e.includes("Traceback")?(0,t.jsx)("div",{className:"text-yellow-400",children:e},n):e.includes("NameError")?(0,t.jsx)("div",{className:"text-red-500 font-semibold",children:e},n):(0,t.jsx)("div",{children:e},n)):s})})]})}},9900:(e,n,s)=>{"use strict";s.r(n),s.d(n,{default:()=>c});var t=s(7876),o=s(3923),r=s(8144),i=s(6004),a=s(1621),l=s(9254);let d=function(e){let{children:n}=e;return(0,t.jsx)(r.S,{children:n})};function h(e){let n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(i.A,{children:[(0,t.jsx)(n.h1,{children:"Python Basics"}),(0,t.jsx)("br",{}),(0,t.jsx)(n.h2,{children:"Table of Contents"}),(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"This article has a lot of content ahead. Below is a table of contents for your convenience:"})}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#what-is-python",children:"What is Python?"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#hello-world",children:"Hello World"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#vars-types",children:"Variables & Types"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#operators",children:"Operators"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#conditions-branching",children:"Conditionals & Branching"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#loops",children:"Loops"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#scope-nesting",children:"Scope & Nesting"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#functions-built-ins",children:"Functions & Built-Ins"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#exceptions-handling",children:"Exceptions & Exception Handling"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#imports",children:"Imports"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"#links",children:"Links and Further Reading"})}),"\n"]}),(0,t.jsx)("br",{}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["What is Python? ",(0,t.jsx)("a",{id:"what-is-python"})]}),(0,t.jsx)(n.p,{children:"Python is a programming language that is simple, easy to learn, and widely usable in the real world! It's a great language to learn for\nmathematical processing, computer vision, machine learning, or the quick prototyping of computer software."}),(0,t.jsxs)(n.p,{children:["Python is what we would call a high level interpreted language. A ",(0,t.jsx)(n.strong,{children:"high level language"})," is one that implements many features or functions\nfor its users, which means less work for us as programmers. An ",(0,t.jsx)(n.strong,{children:"interpreted language"})," is one where the source code gets directly executed,\nand this just means that Python doesn't need to be compiled. These two things combined mean that Python is simple to write, with tons of\nfeatures built in, and its code can be moved between different computers and operating systems without much hassle."]}),(0,t.jsxs)(n.p,{children:["A Python program file ends in ",(0,t.jsx)(n.code,{children:".py"}),", and we execute it by calling the ",(0,t.jsx)(n.code,{children:"python"})," executable on it, for example:"]}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"$ python my_program.py"})}),(0,t.jsx)(n.p,{children:"If you're using a code editor such as VSCode, there will be a run button that does this for you located in the\ntop right."}),(0,t.jsxs)(n.p,{children:["When you run a Python program, Python opens the file, goes to the first line of code, and runs the first line. Then, when it finishes, it goes\nto the next line. We call the line that's currently running the ",(0,t.jsx)(n.em,{children:"executing line"})," and we call the movement of the executing line the ",(0,t.jsx)(n.em,{children:"control\nflow"}),". The control flow goes from one line to the next by default, but there are ways to move it (which we'll discuss in a bit)."]}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["Hello World ",(0,t.jsx)("a",{id:"hello-world"})]}),(0,t.jsx)(n.p,{children:"Let's write our first Python program, Hello World."}),(0,t.jsxs)(n.p,{children:["Create a new file with any name you want. I suggest one that's straightforward and simple, such as ",(0,t.jsx)(n.code,{children:"hello_world.py"}),". Regardless of what you\nchoose, remember to add the ",(0,t.jsx)(n.code,{children:".py"})," file ending. Once we have that created, let's add the following code:"]}),(0,t.jsx)(a.zI,{code:'print("Hello World") # Outputs the words "Hello World"',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"Hello World"})}),(0,t.jsx)(n.p,{children:"Run this program, either by calling Python on the file, or using the button in the top right of VSCode (requires the Python extension to be\ninstalled). You should have an output matching the terminal output above."}),(0,t.jsxs)(n.p,{children:["There are two parts of that program I want you to notice. There is ",(0,t.jsx)(n.code,{children:'print("Hello World")'})," and ",(0,t.jsx)(n.code,{children:'# Outputs the words "Hello World"'}),".\nThe section on the left is the actual code, while the section on the right is a comment. Comments in Python start with a ",(0,t.jsx)(n.code,{children:"#"}),", and\nanything following a comment line will be ignored by the Python compiler."]}),(0,t.jsxs)(n.p,{children:["As for the code, we call the ",(0,t.jsx)(n.code,{children:"print"})," function (built-in to Python) and give it the text ",(0,t.jsx)(n.code,{children:"Hello World"})," wrapped in quotation marks.\nQuotation marks tell Python to treat something as text instead of code. For now, you don't need to fully understand functions or passing stuff\nto them, just know this is how we can get output."]}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["Variables & Types ",(0,t.jsx)("a",{id:"vars-types"})]}),(0,t.jsx)(n.p,{children:"Let's discuss variables and types in Python, things that will enable us to store data, and understand some of the data we'll be using in our\nprograms."}),(0,t.jsx)(n.h3,{children:"Variables"}),(0,t.jsxs)(n.p,{children:["Variables are storage spots for data. In Python, all (or basically all) types are what we would refer to as Objects, which is something we'll\naddress later. Creating a variable in Python is very simple: we come up with a name Python isn't already using, and we use the\n",(0,t.jsx)(n.code,{children:"assignment operator"})," to give it a value. Our name has to be one word (no spaces), and only use alpha-numeric characters and underscores\n(A-z, 0-9, and _ ). Variable names are also case-sensitive, so ",(0,t.jsx)(n.code,{children:"my_var"})," and ",(0,t.jsx)(n.code,{children:"my_Var"})," are two different variables. In Python the\nassignment operator is the ",(0,t.jsx)(n.code,{children:"="})," character. Here's an example:"]}),(0,t.jsx)(a.zI,{code:'start_text = "Hello World"',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsxs)(n.p,{children:["Because a variable contains a value, we can use it like it ",(0,t.jsx)(n.em,{children:"is"})," that value:"]}),(0,t.jsx)(a.zI,{code:'start_text = "Hello World"\nprint(start_text)',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"Hello World"})}),(0,t.jsx)(n.p,{children:"We can see that this has the same output as not using the variable. It's worth noting that Python will use the value stored in a variable\nwhen the line is executed, so if we re-assign a variable before we use it Python won't care about its previous value:"}),(0,t.jsx)(a.zI,{code:'start_text = "Cooler Hello World~" \nstart_text = "Hello World" # We re-assign start_text\nprint(start_text)',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"Hello World"})}),(0,t.jsx)(n.p,{children:"This also applies with the assignment operator. Python won't change the value of a variable until it knows what to change it to, which means\nwe can use a variable in its own assignment operation:"}),(0,t.jsx)(a.zI,{code:'cool_number = 7\ncool_number = cool_number + 3 # Python executes the right half first, "cool_number + 3", and gets 10\n\nprint(cool_number)',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"10"})}),(0,t.jsx)(n.p,{children:"This means we can change variables throughout our program, and use the value of our variable to do that. We can use variables as counters, as\nscores, to hold text, or to save other data."}),(0,t.jsx)(n.h3,{children:"Types"}),(0,t.jsxs)(n.p,{children:["Types are something that variables have, or more specifically, it's what kind of data they are. You've already seen two types: ",(0,t.jsx)(n.code,{children:"int"})," and\n",(0,t.jsx)(n.code,{children:"string"}),". An ",(0,t.jsx)(n.code,{children:"int"})," or integer, is a number value, like 10. A ",(0,t.jsx)(n.code,{children:"string"}),' is some text value, like "Hello World".']}),(0,t.jsx)(n.p,{children:"Python has a few nice base types:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Int: Integer numbers, these are values we can use to hold whole numbers. They can be positive or negative."}),"\n",(0,t.jsxs)(n.li,{children:["Float: Decimal numbers, such as 3.1, we can use them to hold fractions or partial values. They are not perfectly exact (try this:\n",(0,t.jsx)(n.code,{children:"print(0.1 + 0.1 + 0.1 == 0.3"}),', "==" checks equality))']}),"\n",(0,t.jsxs)(n.li,{children:["String: Text data, Python needs to know something is text data. This means you must wrap strings in an indicator character, such as ",(0,t.jsx)(n.code,{children:'"'}),"\nor ",(0,t.jsx)(n.code,{children:"'"}),". It is possible to use the escape character ",(0,t.jsx)(n.code,{children:"\\"})," before one of those characters to use one of those characters in a string, for\nexample ",(0,t.jsx)(n.code,{children:'print("\\"Hello World\\"")'}),"."]}),"\n",(0,t.jsxs)(n.li,{children:["Boolean = True or False, this is pretty simple. We can use the ",(0,t.jsx)(n.code,{children:"not"})," keyword to get the opposite value, so ",(0,t.jsx)(n.code,{children:"not True == False"})," and\n",(0,t.jsx)(n.code,{children:"not False == True"}),". Any time we use the ",(0,t.jsx)(n.code,{children:"=="})," equality operator, the value will be either True or False."]}),"\n"]}),(0,t.jsx)("br",{}),(0,t.jsx)(n.p,{children:'Python also has a few containers, which are types that contain other objects/variables. We call accessing the values inside of a container\n"indexing". Here they are:'}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["List: A collection of items. We can create a list with square brackets, which can be empty or contain a series of values separated by\ncommas. I.e.: ",(0,t.jsx)(n.code,{children:"my_list = []"}),". We can add and remove items from lists."]}),"\n",(0,t.jsxs)(n.li,{children:["Tuple: A sequence of items, a Tuple can't be changed after it's made. Tuples are indicated by a set of objects/values separated by commas,\ncontained in parentheses. I.e.: ",(0,t.jsx)(n.code,{children:'my_tuple = ("hey", "that\'s", "cool")'})]}),"\n",(0,t.jsxs)(n.li,{children:['Dictionary = A map between names and values. You index a dictionary by using its "key" or the name you gave something in the dictionary.\nI.e.: ',(0,t.jsx)(n.code,{children:'my_dictionary = {"keyname": 400}'})]}),"\n"]}),(0,t.jsx)("br",{}),(0,t.jsx)(n.p,{children:"Let's look at a quick demo of all of these types being stored in variables and used. Try and run this in your file and see what shows up\nas the output:"}),(0,t.jsx)(a.zI,{code:'cool_string = "Hey, what\'s up?"\nprint(cool_string)\n\nsilly_float = 7.2452\nprint(silly_float)\n\nmagic_number = 3\nprint(magic_number)\n\nthree_equals_four = (3 == 4)\nprint("Three Equals Four?")\nprint(three_equals_four)\n\nnumber = 11\nprint(number)\n\nnumber = number + 5\nprint(number)\n\nour_list = []\nprint(our_list)\n\nour_list.append(number) # Adds something to list\nprint(our_list)\n\nour_list.append(silly_float)\nour_list.append(cool_string)\nour_list.append(magic_number)\nprint(our_list)\n\n#                  key        value\nmy_dictionary = {"green": "my favorite", \n               "red": "my least favorite",\n               "yellow": "not even a real color"}\n\nprint(my_dictionary["green"]) # Print the value with the key "green"\n# Try other key values!!!!',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["Operators ",(0,t.jsx)("a",{id:"operators"})]}),(0,t.jsxs)(n.p,{children:["Operators are things which affect other values/variables. We've already used a few, such as the addition operator, assignent operator, and\nequality operator. The operators we'll discuss here are all binary operators, which means there is one thing on both sides of them. Python\nwill evaluate operators one at a time, so for example if Python sees ",(0,t.jsx)(n.code,{children:"5 + 10 + 7"})," it will calculate ",(0,t.jsx)(n.code,{children:"5 + 10"})," into ",(0,t.jsx)(n.code,{children:"15"})," and then\nperform ",(0,t.jsx)(n.code,{children:"15 + 7"})," which then equals ",(0,t.jsx)(n.code,{children:"22"}),"."]}),(0,t.jsx)(n.p,{children:"Here are our Operators:"}),(0,t.jsxs)("table",{className:"table-auto w-full border border-blue-300",children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{className:"bg-blue-100",children:[(0,t.jsx)("th",{className:"border px-4 py-2",children:"Operator"}),(0,t.jsx)("th",{className:"border px-4 py-2",children:"Effect"}),(0,t.jsx)("th",{className:"border px-4 py-2",children:"Example"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"-"})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Subtraction"}),(0,t.jsxs)("td",{className:"border px-4 py-2",children:[(0,t.jsx)(n.code,{children:"7 - 5"})," is ",(0,t.jsx)(n.code,{children:"2"})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"+"})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Addition"}),(0,t.jsxs)("td",{className:"border px-4 py-2",children:[(0,t.jsx)(n.code,{children:"7 + 5"})," is ",(0,t.jsx)(n.code,{children:"12"}),", ",(0,t.jsx)(n.code,{children:'"box" + "movie"'})," is ",(0,t.jsx)(n.code,{children:'"boxmovie"'})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"*"})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Multiplication"}),(0,t.jsxs)("td",{className:"border px-4 py-2",children:[(0,t.jsx)(n.code,{children:"4 * 5"})," is ",(0,t.jsx)(n.code,{children:"20"}),", ",(0,t.jsx)(n.code,{children:'"red" * 5'})," is ",(0,t.jsx)(n.code,{children:'"redredredredred"'})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"**"})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Exponentiation (raise to power)"}),(0,t.jsxs)("td",{className:"border px-4 py-2",children:[(0,t.jsx)(n.code,{children:"2 ** 5"})," is ",(0,t.jsx)(n.code,{children:"32"}),", ",(0,t.jsx)(n.code,{children:"4 ** 5"})," is ",(0,t.jsx)(n.code,{children:"1024"})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"/"})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Division"}),(0,t.jsxs)("td",{className:"border px-4 py-2",children:[(0,t.jsx)(n.code,{children:"4 / 5"})," is ",(0,t.jsx)(n.code,{children:"0.8"}),", ",(0,t.jsx)(n.code,{children:"5 / 5"})," is ",(0,t.jsx)(n.code,{children:"1.0"})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"//"})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Floored Division (remove the remainder)"}),(0,t.jsxs)("td",{className:"border px-4 py-2",children:[(0,t.jsx)(n.code,{children:"4 // 5"})," is ",(0,t.jsx)(n.code,{children:"0"}),", ",(0,t.jsx)(n.code,{children:"5 // 5"})," is ",(0,t.jsx)(n.code,{children:"1"})]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"%"})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Modulus (remainder) "}),(0,t.jsxs)("td",{className:"border px-4 py-2",children:[(0,t.jsx)(n.code,{children:"7 % 5"})," is ",(0,t.jsx)(n.code,{children:"2"})]})]})]})]}),(0,t.jsx)("br",{}),(0,t.jsxs)("table",{className:"table-auto w-full border border-blue-300",children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{className:"bg-blue-100",children:[(0,t.jsx)("th",{className:"border px-4 py-2",children:"Operator"}),(0,t.jsx)("th",{className:"border px-4 py-2",children:"Effect"}),(0,t.jsx)("th",{className:"border px-4 py-2",children:"Example"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"=="})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Equality (check if two values are equal to each other)"}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"3 == 3 is True, True == True is True, 5 == 4 is False"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"<="})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Less-Than-Or-Equal (value on left is less or equal to value on right)"}),(0,t.jsxs)("td",{className:"border px-4 py-2",children:["7 ",(0,t.jsx)(n.code,{children:"<="})," 4 is False, 7 ",(0,t.jsx)(n.code,{children:"<="})," 7 is True, 7 ",(0,t.jsx)(n.code,{children:"<="})," 9 is True"]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:">="})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Greater-Than-Or-Equal (value on right is greater or equal to value on left)"}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"7 >= 4 is True, 7 >= 7 is True, 7 >= 9 is False"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"<"})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Less-Than (Value on left less than value on right)"}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"8 < 4 is False, 8 < 8 is False, 8 < 9 is True"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:">"})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Greater-Than (Value on left is greater than value on right)"}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"8 > 4 is True, 8 > 8 is False, 8 > 9 is False"})]})]})]}),(0,t.jsx)("br",{}),(0,t.jsxs)("table",{className:"table-auto w-full border border-blue-300",children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{className:"bg-blue-100",children:[(0,t.jsx)("th",{className:"border px-4 py-2",children:"Operator"}),(0,t.jsx)("th",{className:"border px-4 py-2",children:"Effect"}),(0,t.jsx)("th",{className:"border px-4 py-2",children:"Example"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"="})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Assign"}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Changes the value of object on left to value on right (a = 5)"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"*="})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Multiply and assign"}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"If a is 4, then a *= 5 makes a 20"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"/="})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Divide and assign"}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"If a is 30, then a /= 5 makes a 6.0"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"%="})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Remainder and assign"}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"If a is 10, then a %= 7 makes a 3"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"**="})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Exponentiate and assign"}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"If a is 6, then a **= 5 makes a 7776"})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{className:"border px-4 py-2",children:(0,t.jsx)(n.code,{children:"//="})}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"Floor-divide and assign"}),(0,t.jsx)("td",{className:"border px-4 py-2",children:"If a is 13, then a //= 2 makes a 6"})]})]})]}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["Conditionals & Branching ",(0,t.jsx)("a",{id:"conditions-branching"})]}),(0,t.jsx)(n.p,{children:"Earlier we mentioned that Python allows us to change the control flow. Now that we know the Operators, one way we can do this is by using\nConditionals, things which change the control flow based on the Boolean value of a condition."}),(0,t.jsxs)(n.p,{children:["There is one main conditional statement in Python, the ",(0,t.jsx)(n.code,{children:"if"})," statement. The ",(0,t.jsx)(n.code,{children:"if"})," statement will execute the code contained within its\nscope if the condition it has is true. ",(0,t.jsx)(n.em,{children:"Scope"})," refers to the area or segment of code that another block of code belongs to. Python uses\nindentation to indicate scope. Let's look at a very simple if-statement which demonstrates scope."]}),(0,t.jsx)(a.zI,{code:'# Main program scope\nprint("Hi everyone!")\n\nif True: # If statement, condition is "True"\n  # If statement scope, because this indentation follows the if statement and colon\n  print("The if-statement ran!")  \n  print("This is awesome!!")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"Hi everyone!\nThe if-statement ran!\nThis is awesome!!"})}),(0,t.jsx)(n.p,{children:"Notice how we indented the code following the if-statement. If we indented it without the if-statement, Python would give us an error. But\nbecause we have the if-statement, Python knows we're trying to tell it that the code that's indented belongs to the if-statement. The scope\nof this if-statement will continue until we break the indentation, where the scope will change back to whatever the indentation matches.\nLet's see an example of this:"}),(0,t.jsx)(a.zI,{code:'# Main program scope\nprint("Hi everyone!")\n\nif True: # If statement, condition is "True"\n  # If statement scope, because this indentation follows the if statement and colon\n  print("The if-statement ran!")  \n  print("This is awesome!!")\n\n# Main program scope\nprint("We\'re to the end.")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"Hi everyone!\nThe if-statement ran!\nThis is awesome!!\nWe're to the end."})}),(0,t.jsx)(n.p,{children:"What if the if-statement's condition was false? Let's try that."}),(0,t.jsx)(a.zI,{code:'# Main program scope\nprint("Hi everyone!")\n\nif False: # If statement, condition is "False"\n  # If statement scope, because this indentation follows the if statement and colon\n  print("The if-statement ran!")  \n  print("This is awesome!!")\n\n# Main program scope\nprint("We\'re to the end.")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"Hi everyone!\nWe're to the end."})}),(0,t.jsx)("br",{}),(0,t.jsx)(n.p,{children:'Now, the code that\'s in the scope of the if-statement doesn\'t run. But our conditional doesn\'t need to be "True" or "False", it just needs to\nevaluate (have a value equal to) to True or False. The default value of Python objects/variables is True. So this also works:'}),(0,t.jsx)(a.zI,{code:'# Main program scope\nstring = "Hello World"\n\nif string: # If statement, condition evaluates to true\n  # If statement scope, because this indentation follows the if statement and colon\n  print(string)  \n  print("This is awesome!!")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"Hello world\nThis is awesome!"})}),(0,t.jsx)("br",{}),(0,t.jsx)(n.p,{children:"We can also use our operators to evaluate a condition. This is where the term conditional comes from, like this:"}),(0,t.jsx)(a.zI,{code:'if False == False: # Our condition is that False is equal to False\n  print("That\'s true!")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"That's true!"})}),(0,t.jsx)("br",{}),(0,t.jsx)(n.p,{children:"We can also use other operators in our conditionals:"}),(0,t.jsx)(a.zI,{code:'if (3 + 5) == 8: # Our condition is that the left value (3 + 5) equals the right value, 8\n  print("3 + 5 is equal to 8!")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"3 + 5 is equal to 8!"})}),(0,t.jsx)("br",{}),(0,t.jsx)(n.p,{children:"Let's consider an example like this:"}),(0,t.jsx)(a.zI,{code:'string = "test"\n\nif string == "password": # Our condition is that the variable string equals "password"\n  print("You got it right!")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsxs)(n.p,{children:["If we change ",(0,t.jsx)(n.code,{children:"string"})," so this expression evaluates out to true, we'll get our output:"]}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"You got it right!"})}),(0,t.jsxs)(n.p,{children:["But what if we want our program to do something when the condition is also false? This is where the ",(0,t.jsx)(n.code,{children:"else"})," keyword comes in. An ",(0,t.jsx)(n.code,{children:"else"}),"\ncondition only runs when the if-statement above it evaluates to False. Consider this example:"]}),(0,t.jsx)(a.zI,{code:'string = "test"\n\nif string == "password": # Our condition is that the variable string equals "password"\n  print("You got it right!")\nelse:\n  print("You got it wrong... :(")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"You got it wrong... :("})}),(0,t.jsx)(n.p,{children:"In this case, we get an output either way. Notice that our else-statement is outside the scope of the if-statement, and doesn't have a\ncondition of its own. These are also chained, so if the if-statement evaluates to True the else-statement won't run. Try and modify the\nexample so the if-statement evaluates to true again!"}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.p,{children:["If we wanted to pair another condition with the if statement, we could use the ",(0,t.jsx)(n.code,{children:"elif"})," keyword.\nAn ",(0,t.jsx)(n.code,{children:"elif"})," has the same rules as an if-statement, but it has to follow after an if-statement, and it won't run if the if-statement is True."]}),(0,t.jsx)(a.zI,{code:'string = "second_password"\n\nif string == "password": # Our condition is that the variable string equals "password"\n  print("You got it right!")\nelif string == "second_password":\n  print("You found a secret password..")\nelse:\n  print("You got it wrong... :(")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"You found a secret password..."})}),(0,t.jsx)(n.p,{children:"Conditionals are useful when we're wanting to do things in response to user data or sensor input, or when we're calculating things for our\nprograms, or searching for things in lists or files. You'll be able to use them more effectively when you learn more."}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["Loops ",(0,t.jsx)("a",{id:"loops"})]}),(0,t.jsx)(n.p,{children:"Loops in Python are another way to influence control-flow. Loops repeat code within their scope. How much they repeat this depends on the\ntype of the loop. We have conditional loops, which function similarly to if-statements but repeat the code until the condition stops being\ntrue. We also have iteration loops, which loop over variables in a container."}),(0,t.jsx)(n.h3,{children:"Conditional Loops"}),(0,t.jsxs)(n.p,{children:["You can create a conditional loop in Python using the ",(0,t.jsx)(n.code,{children:"while"}),' keyword, which runs code in its scope "while" the condition is true.\nConsider this for example:']}),(0,t.jsx)(a.zI,{code:'while True:\n  print("Wanna be my friend??")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"This will loop forever, until we cancel it (which we can do by clicking in the output and typing CTRL+C). We could also use a variable in our\nloop, and modify it:"}),(0,t.jsx)(a.zI,{code:'a = 0\n\nwhile a < 5:\n   print("I ran...")\n   a = a + 1 # We could also use a += 1',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"I ran...\nI ran...\nI ran...\nI ran...\nI ran..."})}),(0,t.jsx)(n.p,{children:"Now our loop only runs 5 times. When a loop finishes it lets go of the control flow, and control flow moves to the line after it."}),(0,t.jsx)(a.zI,{code:'a = 0\n\nwhile a < 5:\n   print("I ran...")\n   a = a + 1 # we could also use a += 1\n\nprint("Loop done?") # Loop exits to here',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"I ran...\nI ran...\nI ran...\nI ran...\nI ran...\nLoop done?"})}),(0,t.jsx)("br",{}),(0,t.jsx)(n.h3,{children:"Iterative Loops"}),(0,t.jsxs)(n.p,{children:["Iterative loops perform a loop over a set of objects or variables. This means they do it once (or more) for every object in a container\n(though you might skip some objects). We can loop iteratively using the ",(0,t.jsx)(n.code,{children:"for"})," keyword. Let's loop over a list:"]}),(0,t.jsx)(a.zI,{code:'our_list = ["Hey", "These", "are", "words", "in", "our", "list"]\n\nfor word in our_list: # word will get set equal to every element in "our_list"\n  print(word) # print the value stored in list',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"Hey\nThese\nare\nwords\nin\nour\nlist"})}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.p,{children:["We can also create lists of numbers using the ",(0,t.jsx)(n.code,{children:"range"})," function, which accepts a start and end value like this ",(0,t.jsx)(n.code,{children:"range(start, end)"})," or\na start, end, and skip value like this ",(0,t.jsx)(n.code,{children:"range(start, end, step)"}),". It will return a list of numbers in the range, moving up by step\n(default 1) until it reaches the end. See an example:"]}),(0,t.jsx)(a.zI,{code:"for a in range(0, 10):\n  print(a)",tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"0\n1\n2\n3\n4\n5\n6\n7\n8\n9"})}),(0,t.jsx)(n.p,{children:"Or perhaps:"}),(0,t.jsx)(a.zI,{code:"for a in range(0, 45, 5):\n  print(a)",tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"0\n5\n10\n15\n20\n25\n30\n35\n40"})}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["Scope & Nesting ",(0,t.jsx)("a",{id:"scope-nesting"})]}),(0,t.jsx)(n.p,{children:"We mentioned that loops and if statements have their own scope. It is possible to combine those. It's worth noting that once we break scope,\nwe can't go back to the same one, we just create a different scope. That means we can, for example, have two subloops in one main loop:"}),(0,t.jsx)(a.zI,{code:'a = 0\n\nwhile a < 4:\n  for i in range (0, 3):\n      print("For Loop Ran")\n  \n  b = 0\n  while b < 2:\n      print("While Loop Ran")\n      b += 1\n  \n  a += 1',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"For Loop Ran\nFor Loop Ran\nFor Loop Ran\nWhile Loop Ran\nWhile Loop Ran\nFor Loop Ran\nFor Loop Ran\nFor Loop Ran\nWhile Loop Ran\nWhile Loop Ran\nFor Loop Ran\nFor Loop Ran\nFor Loop Ran\nWhile Loop Ran\nWhile Loop Ran\nFor Loop Ran\nFor Loop Ran\nFor Loop Ran\nWhile Loop Ran\nWhile Loop Ran"})}),(0,t.jsx)("br",{}),(0,t.jsx)(n.p,{children:"We can also combine while-loops and if conditionals, for example:"}),(0,t.jsx)(a.zI,{code:'a = 0 \n\nwhile a <= 5:\n  print("While statement ran")\n  if (a % 2) == 1:\n      print("If statement Ran!")\n  \n  if (a == 5):\n      print("a is 5")\n  a += 1',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"While statement ran\nWhile statement ran\nIf statement Ran!\nWhile statement ran\nWhile statement ran\nIf statement Ran!\nWhile statement ran\nWhile statement ran\nIf statement Ran!\na is 5"})}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["Functions & Built-Ins ",(0,t.jsx)("a",{id:"functions-built-ins"})]}),(0,t.jsxs)(n.p,{children:["Functions will be outlined in more depth later, but for now, know that they're used to call other pieces of code to do things for us.\n",(0,t.jsx)(n.code,{children:"print"})," and ",(0,t.jsx)(n.code,{children:"range"})," are functions Python provides to us. We will be using many functions provided through DroneBlocks and OpenCV, so\nit's good to at least understand that they exist. Functions can either accept no input, or can accept input parameters they'll use.\n",(0,t.jsx)(n.code,{children:"print"})," for instance accepts a string, which it outputs to the terminal, and if you leave it empty it will send an empty message."]}),(0,t.jsx)(n.p,{children:"Built-In Functions:"}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"print"}),"\n",(0,t.jsx)(n.li,{children:"input"}),"\n",(0,t.jsx)(n.li,{children:"str"}),"\n",(0,t.jsx)(n.li,{children:"int"}),"\n",(0,t.jsx)(n.li,{children:"len"}),"\n"]}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["Exceptions & Exception Handling ",(0,t.jsx)("a",{id:"exceptions-handling"})]}),(0,t.jsx)(n.p,{children:"In Python and many other high level languages, program errors generate what we call exceptions. An exception is a deviation from expected\nor defined program behavior. The nice thing about exceptions being generated, rather than your program just dying, is\nthat it gives you the chance to handle them as well as the chance to exit in a safe manner."}),(0,t.jsxs)(n.p,{children:["In Python, we can catch exceptions using the ",(0,t.jsx)(n.code,{children:"try"})," keyword. The ",(0,t.jsx)(n.code,{children:"try"})," keyword executes the code in its scope, and if an exception\noccurs it passes it off to what we call an exception handler. These are other statements underneath the try-block, with instructions on how to\nhandle the instructions. The first handler that matches an exception is the one that will be used. There is additionally a ",(0,t.jsx)(n.code,{children:"finally"}),"\nhandler, which always executes, and can be paired with a try block. Let's see an example of an exception handler:"]}),(0,t.jsx)(a.zI,{code:'try:\n  a = "4" ** 4\nexcept Exception:\n  print("We had an error!")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsxs)(n.p,{children:["This code will error, because strings don't support exponentiation. When it errors, instead of breaking the program, it will generate an\nunsupported operation exception. Python then looks for a handler. Our handler is for the ",(0,t.jsx)(n.code,{children:"Exception"})," exception, which contains all\nexceptions, so it matches and runs the code."]}),(0,t.jsx)("br",{}),(0,t.jsx)(n.p,{children:"We can also use else blocks in a try-except pair. An else-statement paired with a try-block will only execute if no exception was generated.\nSee below:"}),(0,t.jsx)(a.zI,{code:'try:\n  a = "Hello" * 4 # We CAN multiply strings, it repeats them\nexcept Exception:\n  print("We had an error!")\nelse:\n  print("No error happened!")',tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)("br",{}),(0,t.jsx)(n.p,{children:"Your primary use for exception handlers will be making sure that even when you exit/error out of your program, you send the code to safely\nland the drone."}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["Imports ",(0,t.jsx)("a",{id:"imports"})]}),(0,t.jsxs)(n.p,{children:["For functions we might need that aren't built-in to Python, we can use what are called modules. Modules are bundles of code other people\nwrote. We can use the ",(0,t.jsx)(n.code,{children:"import"})," keyword to add them to our code."]}),(0,t.jsxs)(n.p,{children:["Let's import the ",(0,t.jsx)(n.code,{children:"random"})," module to generate random numbers. To import a module, we just type ",(0,t.jsx)(n.code,{children:"import {module_name}"}),". See below:"]}),(0,t.jsx)(a.zI,{code:"import random",tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Once we've imported code, we can call the functions and create the objects from that module by using the module's name with the dot-operator\n(.) which tells Python to search under an object."}),(0,t.jsx)(a.zI,{code:"import random\n\nrand_number = random.randint(0, 1000) # Generates a random number\n\nprint(rand_number) # Print out the number.",tooltips:a.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,t.jsx)(n.p,{children:"Output:"}),(0,t.jsx)(l.A,{children:(0,t.jsx)(n.p,{children:"773"})}),(0,t.jsxs)(n.p,{children:["We call the ",(0,t.jsx)(n.code,{children:"randint"})," function from the ",(0,t.jsx)(n.code,{children:"random"})," module, which generates a random number between the parameters we pass it. There are\ntoo many modules to comment on them all here, so instead we'll mention modules when needed, and the functions we'll need."]}),(0,t.jsx)(n.h2,{children:"Some Module Examples"}),(0,t.jsx)(n.h3,{children:"time"}),(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"time"})," module provides tools for measuring time, waiting for a period of time, getting the time, and timing functions. Some useful\nmethods are:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"time.time() - Returns the time in seconds since 1970"}),"\n",(0,t.jsxs)(n.li,{children:["time.sleep(x) - Pauses the program for ",(0,t.jsx)(n.code,{children:"x"})," seconds"]}),"\n",(0,t.jsx)(n.li,{children:"time.thread_time() - When run in thread, returns time thread has spent executing (excludes time spent sleeping)"}),"\n"]}),(0,t.jsx)(n.h3,{children:"random"}),(0,t.jsxs)(n.p,{children:["The ",(0,t.jsx)(n.code,{children:"random"})," module provides tools for random selection and generation. Some useful methods are:"]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"random.choice(x) - returns a random choice from a container"}),"\n",(0,t.jsxs)(n.li,{children:["random.randint(start, end) - returns a random number between ",(0,t.jsx)(n.code,{children:"start"})," and ",(0,t.jsx)(n.code,{children:"end"}),"."]}),"\n"]}),(0,t.jsx)("br",{}),(0,t.jsxs)(n.h1,{children:["Links and Further Reading ",(0,t.jsx)("a",{id:"links"})]}),(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://www.w3schools.com/python/python_intro.asp",children:"https://www.w3schools.com/python/python_intro.asp"})}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.a,{href:"https://docs.python.org/3.11/",children:"https://docs.python.org/3.11/"})}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,t.jsx)(d,{...e,children:(0,t.jsx)(h,{...e})})}}},e=>{var n=n=>e(e.s=n);e.O(0,[809,636,593,792],()=>n(4746)),_N_E=e.O()}]);