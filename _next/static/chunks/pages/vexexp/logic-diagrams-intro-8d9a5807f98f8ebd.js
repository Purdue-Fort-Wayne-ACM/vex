(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[189],{1128:(e,n,i)=>{(window.__NEXT_P=window.__NEXT_P||[]).push(["/vexexp/logic-diagrams-intro",function(){return i(2586)}])},2586:(e,n,i)=>{"use strict";i.r(n),i.d(n,{default:()=>c});var o=i(7876),r=i(3923),t=i(8144),a=i(6004),s=i(1621);let h=function(e){let{children:n}=e;return(0,o.jsx)(t.S,{children:n})};function l(e){let n={code:"code",h1:"h1",h2:"h2",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(a.A,{children:[(0,o.jsx)(n.h1,{children:"What is a Logic Diagram?"}),(0,o.jsx)(n.p,{children:"A logic diagram is another tool programmers can use to break down the flow of logic in their programs, and plan out their projects. We may\nprovide you logic diagrams alongside a way to interpret them, such as a table outlining what certain shapes or icons mean. There are different\nstandards for logic diagrams in programming and engineering, which try to use similar shaping and structure, however this is not a perfect\nsystem."}),(0,o.jsx)(n.p,{children:"If making a logic-diagram of your own, the important things to note are the shapes for:"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Program entry"}),"\n",(0,o.jsx)(n.li,{children:"Conditional-points"}),"\n",(0,o.jsx)(n.li,{children:"Loops"}),"\n",(0,o.jsx)(n.li,{children:"Functions"}),"\n"]}),(0,o.jsx)(n.p,{children:"This will allow you to plan out the control flow between and through your program. Consider this program diagram:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-mermaid",children:"flowchart TD\n    A[Program Start] --\x3e B(Get Menu Choice)\n    B --\x3e |User Input| C{if User Input...}\n    C --\x3e|phone| D[Phone fa:fa-phone]\n    C --\x3e|house| E[House fa:fa-house]\n    C --\x3e|car| F[Car fa:fa-car]\n    C --\x3e J(Print error message)\n"})}),(0,o.jsx)(n.p,{children:"We might implement this program like this:"}),(0,o.jsx)(s.zI,{code:'\n      user_choice = input("Which menu do you want?")\n\n      if user_choice == "phone":\n          Phone() # Call phone function\n      elif user_choice == "house":\n          House() # Call house function\n      elif user_choice == "car":\n          Car() # Call car function\n      else:\n          print("Please enter one of the following options: car, phone, or house."\n  ',tooltips:s.M2,theme:"dark",showLineNumbers:!0,copyButton:!0,className:"mb-6"}),(0,o.jsx)(n.p,{children:"We implemented something to collect the menu choice and print the error message, and we used an if-statement on the User's input just like the\ndiagram outlined. More serious programs make this more beneficial however, like consider this diagram:"}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.img,{src:"https://github.com/user-attachments/assets/7c026a2f-bb5c-423d-80f7-8908a6ada576",alt:"image",title:"Diagram determining if a Discord user should be sent a notification"})}),(0,o.jsx)(n.p,{children:"It's a lot even with the diagram, but it'd be worse if it were just code - even if it were a simplified psuedocode. One would typically use a\ndiagram to outline the overall functionality of a program (specifically the decisions we make throughout the program) and then use psuedocode\nto plan out the specific details."}),(0,o.jsx)(n.h2,{children:"Links"}),(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"https://www.drawio.com/"}),"\n"]})]})}function c(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,o.jsx)(h,{...e,children:(0,o.jsx)(l,{...e})})}}},e=>{var n=n=>e(e.s=n);e.O(0,[809,636,593,792],()=>n(1128)),_N_E=e.O()}]);