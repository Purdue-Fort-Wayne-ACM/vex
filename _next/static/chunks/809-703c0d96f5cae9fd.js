"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[809],{1621:(e,t,a)=>{a.d(t,{M2:()=>o,Ss:()=>d,zI:()=>c});var r=a(7876),i=a(4232);let n=function(){for(var e=arguments.length,t=Array(e),a=0;a<e;a++)t[a]=arguments[a];return Object.assign({},...t)},o={import:"Statement used to include modules or specific functions from other Python files or libraries.",class:"Keyword used to define a new class - a blueprint for creating objects with attributes and methods.",__init__:"Special method (constructor) called when creating a new instance of a class. Used for initialization.",self:"Reference to the current instance of the class. Always the first parameter in instance methods.","@property":"Decorator that allows a method to be accessed like an attribute, enabling getter functionality.",def:"Keyword used to define a function or method.",try:"Starts a try-except block for error handling. Code that might raise an exception goes here.",except:"Catches and handles specific exceptions that occur in the try block.",raise:"Manually raises an exception with a custom message.",len:"Built-in function that returns the number of items in a sequence (list, string, etc.).",print:"Built-in function that outputs text or variables to the console.","pd.read_csv":"Pandas function to read CSV files into a DataFrame.",dropna:"Pandas method that removes rows containing null/NaN values.",datetime:"Module for working with dates and times in Python.","color()":"Returns the color detected by the sensor"},s={imread:"Loads an image from file. Use cv2.IMREAD_COLOR for color, cv2.IMREAD_GRAYSCALE for grayscale.",imshow:"Displays an image in a window. First parameter is window name, second is the image array.",imwrite:"Saves an image to file. First parameter is filename, second is the image array.",waitKey:"Waits for a key press. Parameter is wait time in milliseconds (0 = wait indefinitely).",destroyAllWindows:"Closes all OpenCV windows. Always call this to clean up properly.",resize:"Resizes an image. Can specify exact dimensions or scaling factors.",cvtColor:"Converts image between color spaces (BGR to RGB, color to grayscale, etc.).",threshold:"Applies binary threshold to create black and white images from grayscale.",GaussianBlur:"Applies Gaussian blur filter to smooth/reduce noise in images.",Canny:"Edge detection algorithm that finds edges and contours in images.",findContours:"Finds contours (object boundaries) in binary images.",drawContours:"Draws contour lines on an image for visualization.",rectangle:"Draws a rectangle on an image. Useful for marking detected objects.",circle:"Draws a circle on an image at specified center point and radius.",putText:"Adds text overlay to an image. Useful for labels and annotations.",VideoCapture:"Captures video from camera or file. Use (0) for default camera.",flip:"Flips an image horizontally, vertically, or both directions.",morphologyEx:"Morphological operations like opening, closing, erosion, dilation.",inRange:"Creates mask for pixels within specified color range (useful for color detection).",bitwise_and:"Performs bitwise AND operation, often used with masks.",HoughCircles:"Detects circles in images using Hough Circle Transform.",matchTemplate:"Template matching to find specific patterns/objects in images.",getRotationMatrix2D:"Creates rotation matrix for rotating images around a point.",warpAffine:"Applies affine transformation (rotation, scaling, translation) to images.","np.array":"Converts data to numpy array. Images in OpenCV are numpy arrays.",zeros:"Creates array filled with zeros. Useful for creating blank images or masks.",ones:"Creates array filled with ones. Can be used for creating white images.",uint8:"Unsigned 8-bit integer data type. Standard for image pixel values (0-255).",float32:"32-bit floating point. Used for some OpenCV operations requiring decimal precision.",concatenate:"Joins arrays along an axis. Useful for combining multiple images side by side.",hstack:"Stacks arrays horizontally (side by side). Shortcut for horizontal image concatenation.",vstack:"Stacks arrays vertically (top to bottom). Shortcut for vertical image concatenation.",where:"Returns elements based on condition. Useful for conditional image processing.",clip:"Limits array values to specified range. Prevents pixel values from exceeding 0-255.",mean:"Calculates average value. Useful for getting average brightness of image regions.",std:"Calculates standard deviation. Measures variation in pixel intensities.",max:"Finds maximum value in array. Useful for finding brightest pixels.",min:"Finds minimum value in array. Useful for finding darkest pixels.",shape:"Tuple containing array dimensions. For images: (height, width, channels).",dtype:"Data type of array elements. Important for proper image processing.",Tk:"Creates main window for GUI application. Root container for all widgets.",Label:"Widget for displaying text or images. Can show processed OpenCV images.",Button:"Clickable button widget. Use for triggering image processing functions.",Scale:"Slider widget for numeric input. Great for adjusting processing parameters.",Frame:"Container widget for organizing other widgets in groups.",mainloop:"Starts the GUI event loop. Must be called to make window responsive.",pack:"Simple layout manager. Stacks widgets vertically or horizontally.",grid:"Grid-based layout manager. More precise control over widget positioning.",place:"Absolute positioning layout manager. Specify exact x,y coordinates.",command:"Parameter that specifies function to call when button is clicked.","PIL.Image.fromarray":"Converts numpy array to PIL Image. Needed for displaying OpenCV images in Tkinter.","PIL.ImageTk.PhotoImage":"Converts PIL Image to format Tkinter can display.",BGR:"Blue-Green-Red color format used by OpenCV (opposite of standard RGB).",RGB:"Red-Green-Blue color format standard in most image applications.",HSV:"Hue-Saturation-Value color space. Better for color-based object detection.",grayscale:"Single-channel image with only brightness information (no color).",binary:"Image with only two values: 0 (black) and 255 (white).",mask:"Binary image used to select specific regions for processing.",kernel:"Small matrix used for filtering operations (blur, sharpen, edge detection).",morphology:"Operations that process image shape/structure (erosion, dilation, etc.).",contour:"Curve joining continuous points of same color/intensity. Object boundary.",ROI:"Region of Interest - specific area of image selected for processing.",threshold:"Value used to separate pixels into different categories (usually black/white)."},l={"tkinter.Toplevel":"Creates additional window separate from main window. Useful for dialog boxes.","tkinter.Canvas":"Widget for drawing graphics and displaying images. Very flexible for custom visuals.","tkinter.Text":"Multi-line text widget with advanced formatting and editing capabilities.","tkinter.Entry":"Single-line text input widget. For getting user text input.","tkinter.Listbox":"Widget displaying list of items that user can select from.","tkinter.Combobox":"Dropdown menu widget. Combines entry and listbox functionality.","tkinter.Checkbutton":"Checkbox widget for boolean (on/off) options.","tkinter.Radiobutton":"Radio button for selecting one option from multiple choices.","tkinter.Spinbox":"Widget for selecting numeric values with up/down arrows.","tkinter.Progressbar":"Shows progress of long-running operations visually.","tkinter.Notebook":"Tabbed interface widget for organizing content in tabs.","tkinter.PanedWindow":"Resizable panes that user can adjust by dragging.","tkinter.Scrollbar":"Scrollbar widget for scrolling through large content.","tkinter.Menu":"Creates menu bars, context menus, and dropdown menus.","tkinter.Menubutton":"Button that displays menu when clicked.",sticky:"Grid parameter controlling how widget expands within its cell (N,S,E,W).",columnspan:"Grid parameter making widget span multiple columns.",rowspan:"Grid parameter making widget span multiple rows.",padx:"Horizontal padding (space) around widget.",pady:"Vertical padding (space) around widget.",ipadx:"Internal horizontal padding within widget borders.",ipady:"Internal vertical padding within widget borders.",anchor:"Controls how widget is positioned within its allocated space.",fill:"Controls how widget expands to fill available space (X, Y, or BOTH).",expand:"Boolean controlling whether widget expands when window is resized.",side:"Pack parameter controlling which side widget is placed on (TOP, BOTTOM, LEFT, RIGHT).",bind:"Attaches event handler function to widget. Responds to user interactions.",event:"Object containing information about user interaction (click position, key pressed, etc.).","<Button-1>":"Left mouse button click event. Most common click event.","<Button-3>":"Right mouse button click event. Often used for context menus.","<Double-Button-1>":"Double-click event. Useful for activating items.","<Motion>":"Mouse movement event. Tracks mouse position over widget.","<Enter>":"Mouse enters widget area event.","<Leave>":"Mouse leaves widget area event.","<KeyPress>":"Any key pressed event. Can capture keyboard input.","<Return>":"Enter key pressed event. Common for form submission.","<Configure>":"Widget size/position changed event. Useful for responsive layouts.",after:"Schedules function to run after specified time delay (in milliseconds).",after_idle:"Schedules function to run when GUI is idle (not processing other events).","tkinter.StringVar":"Special variable that automatically updates connected widgets when changed.","tkinter.IntVar":"Integer variable that automatically updates connected widgets.","tkinter.DoubleVar":"Floating-point variable that automatically updates connected widgets.","tkinter.BooleanVar":"Boolean variable that automatically updates connected widgets.",textvariable:"Links widget to StringVar so changes update automatically.",variable:"Links widget (like Checkbutton) to IntVar or BooleanVar.",get:"Method to retrieve current value from widget or variable.",set:"Method to change value of widget or variable.",trace:"Monitors variable for changes and calls function when it changes.",protocol:"Handles window manager events like closing window.",WM_DELETE_WINDOW:"Event triggered when user tries to close window.",withdraw:"Hides window without destroying it. Can be shown again later.",deiconify:"Shows previously hidden window.",iconify:"Minimizes window to taskbar.",lift:"Brings window to front (above other windows).",focus_set:"Gives keyboard focus to widget.",grab_set:"Makes window modal (blocks interaction with other windows).",update:"Forces GUI to process pending events and redraw.",update_idletasks:"Processes only idle events without waiting for user input.",configure:"Changes widget properties after creation (color, font, size, etc.).",config:"Shorthand for configure method.",cget:"Gets current value of widget property.","tkinter.font.Font":"Creates custom font objects with specific family, size, and style.",relief:"Border style of widget (FLAT, RAISED, SUNKEN, GROOVE, RIDGE).",borderwidth:"Width of widget border in pixels.",highlightbackground:"Color of focus highlight when widget doesn't have focus.",highlightcolor:"Color of focus highlight when widget has focus.",cursor:"Mouse cursor style when hovering over widget.",state:"Widget state: NORMAL (active), DISABLED (grayed out), or READONLY.","cv2.imread":"Loads image file into numpy array for processing.","cv2.cvtColor":"Converts between color formats (BGR to RGB for Tkinter display).","cv2.resize":"Changes image dimensions. Important for fitting images in GUI.","PIL.Image.fromarray":"Converts OpenCV numpy array to PIL Image for Tkinter.","PIL.ImageTk.PhotoImage":"Converts PIL Image to PhotoImage for display in Tkinter widgets.","cv2.VideoCapture":"Captures frames from camera or video file.",read:"Method of VideoCapture that gets next frame from video source.",release:"Closes video capture device. Important for cleanup.",BGR2RGB:"OpenCV constant for converting BGR (OpenCV format) to RGB (display format).",IMREAD_COLOR:"OpenCV flag for loading color images.",IMREAD_GRAYSCALE:"OpenCV flag for loading images as grayscale.","threading.Thread":"Runs code in separate thread to prevent GUI freezing during long operations.","queue.Queue":"Thread-safe way to pass data between main GUI thread and worker threads.",daemon:"Thread property that makes thread close when main program ends.",start:"Begins execution of thread.",join:"Waits for thread to complete before continuing.",is_alive:"Checks if thread is still running.",put:"Adds item to queue (thread-safe).",get:"Removes and returns item from queue (thread-safe).",empty:"Checks if queue has no items."},d=n(s,{pack:"Simple layout manager that stacks widgets.",grid:"Precise layout manager using rows and columns.",mainloop:"Starts the GUI - makes it responsive to user input.",destroy:"Closes window and ends program."});n(l,{"np.array":"OpenCV images are numpy arrays that can be processed mathematically.",shape:"Image dimensions: (height, width, channels).",dtype:"Image data type, usually uint8 for standard images.","cv2.waitKey":"In GUI apps, use waitKey(1) to process OpenCV events without blocking."}),n(s,l);let c=e=>{let{code:t,tooltips:a={},className:n="",showLineNumbers:o=!0,copyButton:s=!0,theme:l="dark"}=e,[d,c]=(0,i.useState)(null),[g,u]=(0,i.useState)({x:0,y:0}),[m,p]=(0,i.useState)(!1),f=(0,i.useRef)(null),h=["and","as","assert","break","class","continue","def","del","elif","else","except","finally","for","from","global","if","import","in","is","lambda","nonlocal","not","or","pass","raise","return","try","while","with","yield","True","False","None"],y=["print","len","range","enumerate","zip","map","filter","sorted","list","dict","set","tuple","str","int","float","bool","type","isinstance","hasattr","getattr","setattr","super","open","input","abs","min","max","sum","all","any","__init__","__str__","__repr__","__len__","__call__","__enter__","__exit__","self","cls"],w=["numpy","pandas","matplotlib","requests","json","os","sys","datetime","math","random","time","urllib","sqlite3","DataFrame","Series","array","ndarray","plt","np","pd","cv2","tkinter","PIL","Image","ImageTk","threading","queue","imread","imshow","imwrite","waitKey","destroyAllWindows","resize","cvtColor","threshold","GaussianBlur","Canny","findContours","drawContours","rectangle","circle","putText","VideoCapture","flip","morphologyEx","inRange","bitwise_and","zeros","ones","concatenate","hstack","vstack","where","clip","mean","std","max","min","Tk","Label","Button","Scale","Frame","Canvas","Entry","Listbox","Checkbutton","Radiobutton","Text","Scrollbar"],b=(e,t)=>{let a={dark:{keyword:"text-blue-400 font-semibold",builtin:"text-green-400 font-semibold",library:"text-purple-400 font-semibold",string:"text-green-300",fstring:"text-cyan-300",docstring:"text-green-300 italic",number:"text-yellow-300",comment:"text-gray-500 italic",decorator:"text-orange-400",operator:"text-red-400",punctuation:"text-gray-300",identifier:"text-white",text:"text-white"},light:{keyword:"text-blue-600 font-semibold",builtin:"text-green-600 font-semibold",library:"text-purple-600 font-semibold",string:"text-green-700",fstring:"text-cyan-700",docstring:"text-green-700 italic",number:"text-orange-600",comment:"text-gray-600 italic",decorator:"text-orange-600",operator:"text-red-500",punctuation:"text-gray-700",identifier:"text-gray-900",text:"text-gray-900"}};return a[t][e]||a[t].text},x=(e,t)=>{let r=null,i=null;if(a[t.value])r=t.value,i=a[t.value];else if("decorator"===t.type){for(let e in a)if(t.value.includes(e)){r=e,i=a[e];break}}else if("dotted_identifier"===t.type||"library"===t.type)if(a[t.value])r=t.value,i=a[t.value];else{for(let e of t.value.split("."))if(a[e]){r=e,i=a[e];break}if(!i){for(let e in a)if(e.includes(".")&&t.value===e){r=e,i=a[e];break}}}if(i){let t=e.target.getBoundingClientRect();u({x:t.left+t.width/2,y:t.top-10}),c({content:i,token:r})}},v=()=>{c(null)},k=async()=>{try{await navigator.clipboard.writeText(t),p(!0),setTimeout(()=>p(!1),2e3)}catch(e){console.error("Failed to copy code:",e)}},C=(e=>{let t=[];return e.split("\n").forEach((e,a)=>{let r=[],i=[];[{type:"comment",regex:/#.*$/g},{type:"docstring",regex:/"""[\s\S]*?"""/g},{type:"docstring",regex:/'''[\s\S]*?'''/g},{type:"fstring",regex:/f["'](?:[^"'\\]|\\.)*["']/g},{type:"string",regex:/"(?:[^"\\]|\\.)*"/g},{type:"string",regex:/'(?:[^'\\]|\\.)*'/g},{type:"number",regex:/\b\d+\.?\d*[jJ]?\b/g},{type:"decorator",regex:/@\w+(?:\.\w+)*/g},{type:"identifier",regex:/\b[a-zA-Z_][a-zA-Z0-9_]*\b/g},{type:"operator",regex:/[+\-*/%=<>!&|^~]+|\/\/|\*\*|==|!=|<=|>=|<<|>>|\+=|-=|\*=|\/=|%=|&=|\|=|\^=|<<=|>>=|\*\*=/g},{type:"punctuation",regex:/[{}()\[\];:,.]/g},{type:"whitespace",regex:/\s+/g}].forEach(t=>{let a,r=new RegExp(t.regex.source,t.regex.flags);for(;null!==(a=r.exec(e));)i.push({type:t.type,value:a[0],start:a.index,end:a.index+a[0].length})}),i.sort((e,t)=>e.start-t.start);let n=[];i.forEach(e=>{n.some(t=>e.start<t.end&&e.end>t.start)||n.push(e)});let o=0;n.forEach(t=>{t.start>o&&r.push({type:"text",value:e.slice(o,t.start),line:a,column:o});let i=t.type;"identifier"===t.type&&(h.includes(t.value)?i="keyword":y.includes(t.value)?i="builtin":w.includes(t.value)&&(i="library")),r.push({type:i,value:t.value,line:a,column:t.start}),o=t.end}),o<e.length&&r.push({type:"text",value:e.slice(o),line:a,column:o}),t.push(r)}),t})(t),I="dark"===l?"bg-gray-900 text-white border-gray-700":"bg-white text-gray-900 border-gray-300";return(0,r.jsxs)("div",{className:"relative rounded-lg border ".concat(I," ").concat(n),children:[(0,r.jsxs)("div",{className:"flex justify-between items-center px-4 py-2 border-b ".concat("dark"===l?"border-gray-700 bg-gray-800":"border-gray-300 bg-gray-50"),children:[(0,r.jsx)("span",{className:"text-sm font-medium ".concat("dark"===l?"text-gray-300":"text-gray-700"),children:"Python Script"}),s&&(0,r.jsx)("button",{onClick:k,className:"px-3 py-1 text-xs rounded transition-colors ".concat("dark"===l?"bg-gray-700 hover:bg-gray-600 text-gray-300":"bg-gray-200 hover:bg-gray-300 text-gray-700"),children:m?"Copied!":"Copy"})]}),(0,r.jsx)("div",{className:"p-4",children:(0,r.jsx)("pre",{className:"overflow-x-auto",ref:f,children:(0,r.jsx)("code",{className:"text-xs sm:text-sm font-mono",children:C.map((e,t)=>(0,r.jsxs)("div",{className:"flex",children:[o&&(0,r.jsx)("div",{className:"select-none w-10 sm:w-12 text-right pr-2 sm:pr-4 text-xs sm:text-sm flex-shrink-0 ".concat("dark"===l?"text-gray-500":"text-gray-400"),children:t+1}),(0,r.jsx)("div",{className:"flex-1 min-w-0",children:e.map((e,t)=>{let i=a[e.value];return i||"decorator"!==e.type||(i=Object.keys(a).some(t=>e.value.includes(t))),i||"dotted_identifier"!==e.type&&"library"!==e.type||(i=e.value.split(".").some(e=>a[e])||Object.keys(a).some(t=>t.includes(".")&&e.value===t)),(0,r.jsx)("span",{className:"".concat(b(e.type,l)," ").concat(i?"cursor-help underline decoration-dotted underline-offset-2":""),onMouseEnter:i?t=>x(t,e):void 0,onMouseLeave:i?v:void 0,children:e.value},t)})})]},t))})})}),d&&(0,r.jsxs)("div",{className:"fixed z-50 px-3 py-2 text-sm rounded-lg shadow-lg max-w-xs pointer-events-none transform -translate-x-1/2 -translate-y-full ".concat("dark"===l?"bg-gray-800 text-white border border-gray-600":"bg-white text-gray-900 border border-gray-300"),style:{left:g.x,top:g.y},children:[(0,r.jsx)("div",{className:"font-semibold text-blue-400 mb-1",children:d.token}),(0,r.jsx)("div",{children:d.content}),(0,r.jsx)("div",{className:"absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent ".concat("dark"===l?"border-t-gray-800":"border-t-white")})]})]})}},3923:(e,t,a)=>{a.d(t,{R:()=>i});var r=a(7876);function i(e){return{h1:e=>{let{children:t}=e;return(0,r.jsx)("h1",{className:"text-5xl font-bold",children:t})},h2:e=>{let{children:t}=e;return(0,r.jsx)("h1",{className:"text-4xl mt-4 font-bold",children:t})},h3:e=>{let{children:t}=e;return(0,r.jsx)("h1",{className:"text-2xl mt-2 font-bold",children:t})},h4:e=>{let{children:t}=e;return(0,r.jsx)("h1",{className:"text-l mt-1.5 font-bold",children:t})},hr:e=>{let{children:t}=e;return(0,r.jsx)("hr",{className:"m-1.5",children:t})},p:e=>{let{children:t}=e;return(0,r.jsx)("p",{className:"mb-3",children:t})},ul:e=>{let{children:t}=e;return(0,r.jsx)("ul",{className:"list-disc",children:t})},table:e=>{let{children:t}=e;return(0,r.jsx)("table",{className:"table-auto border-collapse border border-gray-300 w-full text-left"})},th:e=>{let{children:t}=e;return(0,r.jsx)("th",{className:"border border-gray-300 px-4 py-2"})},tr:e=>{let{children:t}=e;return(0,r.jsx)("tr",{className:"hover:bg-gray-50"})},td:e=>{let{children:t}=e;return(0,r.jsx)("td",{className:"border border-gray-300 px-4 py-2"})},...e}}},6004:(e,t,a)=>{a.d(t,{A:()=>i});var r=a(7876);function i(e){let{children:t}=e;return(0,r.jsx)("div",{className:"w-11/12 mx-auto p-6",children:t})}},8144:(e,t,a)=>{a.d(t,{S:()=>i});var r=a(7876);function i(e){let{children:t}=e;return(0,r.jsx)("div",{className:"bg-main rounded-lg shadow-lg max-w-5xl mx-auto p-3 flex flex-col gap-2",children:t})}}}]);